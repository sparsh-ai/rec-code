{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to RecoBase RecoBase is a collection of python code, notebooks and other essential resources to know and build recommender systems. What is a Recommender System? At their core, recommendation systems are nothing but similarity hunters. Depending on how you define \"similarity\" between two \"items\", you can a range of applications for these systems. Given any reasonable similarity function between items, a recommender system presents relevant items to a user. This similarity function between 2 items could be common users that have interacted with those items in the past, similarity in their attributes, similarity in context in which they are used, and so on. Recommendation engines are, at their core, information filtering tools that use algorithms and data to recommend the most relevant items to a particular user in a given context. Recommendation systems are built to predict what users might like, especially when there are lots of choices available. They can explicitly offer those recommendations to users (e.g., Amazon or Netflix, the classic examples), or they might work behind the scenes to choose which content to surface without giving the user a choice. Either way, the \u201cwhy\u201d is clear: they\u2019re critical for certain types of businesses because they can expose a user to content they may not have otherwise found or keep a user engaged for longer than they otherwise would have been. While building a simple recommendation system can be quite straightforward, the real challenge is to actually build one that works and where the business sees real uplift and value from its output. Recommendation systems can be built using a variety of techniques, from simple (e.g., based only on other rated items from the same user) to extremely complex. Complex recommendation systems leverage a variety of different data sources (one challenge is using unstructured data, especially images, as the input) and machine learning (including deep learning) techniques. Thus, they are well suited for the world of artificial intelligence and more specifically unsupervised learning; as users continue to consume content and provide more data, these systems can be built to provide better and better recommendations. Recommendation systems can be an effective way to expose users to content they may not have otherwise found, which in turn can forward larger business goals like increasing sales, advertising revenues, or user engagement. But there are a few key points to find success with recommendation systems. Namely, recommendation systems should be, above all, necessary. Building a complex system that requires experienced staff and ongoing maintenance when a simpler solution will do is a waste of data team resources that could be spent elsewhere for more impact. The challenge lies in building a system that will actually have a business impact; building the system in and of itself shouldn\u2019t be the end goal. Recommendation systems should also be agile. That is, adaptable and able to evolve as users do. Putting a recommendation system into production isn\u2019t the final step in the process; rather, it\u2019s an ongoing evolution, looking at what works, what doesn\u2019t, thinking about additional data sources that might help make better recommendations, etc A recommender system calculates and provides relevant content to the user based on knowledge of the user, content, and interactions between the user and the item. A recommendation is a particular form of information filtering, that exploits past behaviors and user similarities to generate a list of information items that is personally tailored to end-users preferences. In general, the recommendation lists are generated based on user preferences, item features, user-item past interactions, and some other additional information such as temporal and spatial data. In the last decade, the Internet has evolved into a platform for large-scale online services, which profoundly changed the way we communicate, read the news, buy products, and watch movies. In the meanwhile, the unprecedented number of items (we use the term item to refer to movies, news, books, and products.) offered online requires a system that can help us discover items that we preferred. Recommender systems are therefore powerful information filtering tools that can facilitate personalized services and provide tailored experiences to individual users. In short, recommender systems play a pivotal role in utilizing the wealth of data available to make choices manageable. ~d2lAI The benefits of employing recommender systems are two-folds: On the one hand, it can largely reduce users\u2019 effort in finding items and alleviate the issue of information overload. On the other hand, it can add business value to online service providers and is an important source of revenue. Users rely on recommender systems to filter out the numerous uninformative messages and facilitate decision making. An efficient recommender system should accurately capture users\u2019 preferences and suggest items that the users are potentially interested in, which can enhance users\u2019 satisfactory towards platform and improve user retention. They\u2019re critical for certain types of businesses because they can expose a user to content they may not have otherwise found or keep a user engaged for longer than they otherwise would have been. Recommender systems are mainly used for auto-suggesting the right content or product to the right users in a personalized manner to enhance the overall experience. Recommender systems are really powerful in terms of using huge amounts of data and learning to understand the preferences of specific users. Recommendations help users to easily navigate through millions of products or tons of content (articles/videos/movies) and show them the right item/information that they might like or buy. So, in simple terms, RS help discover information on behalf of the users. Now, it depends on the users to decide if RS did a good job at recommendations or not, and they can choose to either select the product/content or discard and move on. Each of the decisions of users (Positive or Negative) helps to retrain the RS on the latest data to be able to give even better recommendations. The \u201cWhat to Recommend\u201d part totally depends on the context in which RS are used and can help the business to increase revenues by providing the most likely items that users can buy or increasing the engagement by showcasing relevant content at the right time. RS take care of the critical aspect that the product or content that is being recommended should either be something which users might like but would not have discovered on their own. Along with that, RS also need an element of varied recommendations to keep it interesting enough. A few examples of heavy usage of RS by businesses today such as Amazon products, Facebook\u2019s friend suggestions, LinkedIn\u2019s \u201cPeople you may know,\u201d Netflix\u2019s movie, YouTube\u2019s videos, Spotify\u2019s music, and Coursera\u2019s courses. Some of the immediate benefits that RS offer in retail settings are: 1. Increased Revenue 2. Positive Reviews and Ratings by Users 3. Increased Engagement. Recommendations break down into two different categories: Exploitation: This is a sensible suggestion. For instance, if you listen to a lot of classical music, perhaps you should listen to Bach. Exploration: this is the irrational suggestion\u2014chaos. Sometimes you don\u2019t want to listen to Bach; sometimes you want to listen to Bachman Turner Overdrive. Now, why do we even make recommendations in the first place? And this is an essential thing to realize, because recommendations are taking the haystack and finding the needle within it. Sometimes when going to a restaurant, the menu can overwhelm. That\u2019s when the server would make a recommendation. What we want to do is automate that. Because if you are on YouTube or Spotify, you might have millions of items on the menu. Walk past any store in the world and you\u2019ll see the same tactics in effect: window displays showing the brand\u2019s most attractive, best-selling products. Entering the store will see smaller displays like mannequins, collections, or recommended setups. These are traditional methods of recommending products to shoppers \u2013 of showing potential customers what is currently in fashion to form a connection and suggesting what they might want to buy. While eCommerce doesn\u2019t have glass windows, well-executed product recommendations can offer even more to digital brands. The Rise of Recommendation Engines Historically, marketing recommendations were human-built. Based on qualitative and quantitative marketing studies, marketing moguls would set up rules that statically defined the impression (in the sense of advertising views) sent to a customer with given characteristics. This technique gave rise to the marketing data mining urban legend that a grocery chain discovered that men who bought diapers on Thursdays and Saturdays were more likely to buy beer as well and hence placing the two next to each other will increase beer sales. Overall, recommendation engines created manually presented numerous bottlenecks that resulted in a significant amount of wasted money: it was hard to build rules based on many different customer features because the rule creation process was manual, it was hard to set up experiments to test many different kinds of impressions, and it was hard to update the rules when the behavior of the customers changed. The Role of Machine Learning The rise of ML has brought a new paradigm to recommendation engines, allowing for the elimination of rules based on human insight. A new class of algorithm called collaborative filtering dominates the field. This algorithm is able to analyze customer and purchase data with millions of customers and tens of thousands of products to perform recommendations without any prior marketing knowledge. By identifying efficiently what customers that look like the current customer bought, marketers can rely on automatic strategies that outperform traditional ones both in cost and efficiency. Because the process of building strategies is automatic, it is possible to update them regularly and to compare them using A/B testing or shadow scoring schemes (including the way to choose the impression among all possibilities). Note that these algorithms may be combined with more classical business rules for various reasons\u2014e.g., avoiding the filtering bubble, not selling a product in a given geographical area, or preventing the use of a specific association that is statistically meaningful but unethical to use (like proposing alcohol to a recovering alcoholic), to name a few. Push or Pull? When implementing a recommendation engine, it is important to keep in mind that its structure will depend on whether the recommendations are pushed or pulled. Push channels are the easiest to handle; for example, they can consist of sending emails or making outbound calls. The recommendation engine can be run on a regular basis in batch mode (typically between once a day and once a month), and it is easy to split the customer dataset into several parts to perform analysis within a sound experimental design. The regularity of the process allows for regular review and optimization of the strategy. Pull channels are often more effective because they provide information to customers when they need it\u2014for example, when doing an online search or when calling a customer service line. Specific information from the session can be used (e.g., what the user has searched for) to precisely tailor the recommendation. Music streaming platforms, for instance, provide pull-channel recommendations for playlists. Recommendations can be prebaked, as illustrated in the in-depth example in this chapter, or made in real time. In the latter case, a special architecture has to be set up to compute recommendations on the fly. Comparing strategies in a pull context is more challenging. First, the customers who call in on a given channel are likely to differ from the average customer. In simple cases, it is possible to randomly choose the strategy to use for each recommendation, but it also happens that the strategy needs to be used consistently over a given period for a given customer. This usually results in an unbalanced proportion of recommendations made with each strategy, which makes the statistical treatment to decide which one is the best more complex. However, once a good framework is set, this allows a very quick improvement cycle, as many strategies can be tested in real time. Almost everything we buy or consume today is influenced by some form of recommendation; whether that's from friends, family, external reviews, and, more recently, from the sources selling you the product. When you log on to Netflix or Amazon Prime, for example, you will see a list of movies and television shows the service thinks you will like based on your past watching (and rating) history. Facebook suggests people it thinks you may know and would probably like to add. It also curates a News Feed for you based on the posts you've liked, the people you've be-friended, and the pages you've followed. Amazon recommends items to you as you browse for a particular product. It shows you similar products from a competing source and suggests auxiliary items frequently bought together with the product. Why do online platforms need personalization capabilities? Personalization helps customers discover products and content that can meet their needs and interests. It motivates engagement on digital properties, as customers see more of what they want and like. This growth in engagement can be observed through measurable improvements in metrics such as Click-Through-Rates (CTR), watch durations on videos, dwell times on articles and bounce rates. On top of all this, personalization is proven to improve conversions, resulting in growth in revenues or other desired outcomes. The massive business potential observed in personalization motivated foresighted companies such as Amazon to invest and capitalize on the technology very early on. Amazon uses personalization intensively across their suite of platforms ranging from the Amazon.com website to Amazon Prime Video, Amazon Kindle, Amazon Music and more. Today, the algorithms have become significantly advanced, seen in widgets that recommend based on browsing history or from categories that are of high interest to the customer. Personalization Challenges A common approach to starting personalization is with a rule based system that is designed with pre-existing ideas or trends in mind, for eg. a retailer recommending boots to women who visit their website from New York at the start of winter. This system makes sense, however, it misses out on capturing the diversity of needs across people as user numbers and catalog sizes grow. Hence using machine learning should prove a better solution, producing a comprehensive algorithm more catered to individual level recommendations. Working with ML however, comes along with some challenges: Recommendation systems should respond to the actions and intentions of a user in real time and they should be able to effectively handle new users and new items in the catalog \u2013 a common challenge for ML systems. Recommendations should not have biases for popular goods, pushing the most relevant product or content based on the needs of the customer. Algorithms are not one size fits all, requiring customizations for different use cases. Building good personalization models is very hard, requiring a high level of ML expertise. These complexities push people away from using ML, choosing to go with rule based systems or no personalization at all. Using a rule based system may come with lesser complications, however they present poor performance, poor scalability and a high cost and effort of maintenance. Those that choose to tackle machine learning tools for better results can also find them hard to build and manage, in addition to their limitations in matching recommendations with customer intent and managing real-time personalization for new customers. Personalization engines suggest relevant content with the objective of maximizing a specific metric. For example: a news website might want to increase the number of clicks in a session; on the other hand, for an e-commerce app it is very important to identify visitors that are more likely to buy a product in order to target them with special offers. Personalization is a very broad concept. In this case, personalization equates to leveraging engagement data to build an interest profile for a user. Many of the apps you use every day leverage machine learning to personalize your feeds. Here are 4 examples: Instagram created an \u201cExplore\u201d section that shows you pictures you\u2019re likely to be interested in, based on your past clicks, likes and engagement. Quora uses your engagement data, like the posts that you search for and comment on, to personalize your feed experience and emails. Facebook uses advanced machine learning to prioritize posts from the friends you engage with most, after starting out with just a basic edge rank algorithm. Etsy analyzes your search and shopping behavior to optimize your newsfeed, email and e-commerce conversion. Scalability It\u2019s important to create a recommendation system that will scale with the amount of data you have. If it\u2019s built for a limited dataset and that dataset grows, computation costs grow exponentially, and the system will be unable to handle the amount of data. To avoid having to rebuild your recommendation system later on, you must ensure from the beginning it is built to scale to expected data volumes. Scalability is critical to the usefulness of recommendation systems in industry settings. To that end, recommendation models can definitely be more efficient by exploring these following problems: Incremental learning for non-stationary and streaming data (large volume of incoming users and items) Computational efficiency for high-dimensional tensors and multimedia data sources Balancing the complexity and scalability as the model\u2019s parameters increase exponentially A promising research area is to use compression techniques to compact the embedding space of high-dimensional input data, which can reduce the computation time during model learning. Another promising approach is to distill knowledge to learn compact models for inference in recommendation systems. The key concept is to train a small student model that absorbs knowledge from a large teacher model. Agility People\u2019s tastes don\u2019t stay static over time, and if a recommendation system isn\u2019t built to consider this fact, it may never be as accurate as it could be. Similarly, there is a risk of building a recommendation system that doesn\u2019t get better over time. As users continue to consume content and more data is available, your recommendation system should learn more about users and adapt to their tastes. A recommendation system not agile enough to continue to adapt can quickly become obsolete and won\u2019t serve its purpose. It\u2019s important to create a recommendation system that will scale with the amount of data you have. If it\u2019s built for a limited dataset and that dataset grows, computation costs grow exponentially, and the system will be unable to handle the amount of data. To avoid having to rebuild your recommendation system later on, you must ensure from the beginning it is built to scale to expected data volumes. It\u2019s also possible that after spending time, energy, and resources on building a recommendation system (and even after having enough data and good initial results) that the recommendation system only makes very obvious recommendations . The crux of avoiding this pitfall really harkens back to the first of the seven steps: understand the business need. If there isn\u2019t enough of a content long-tail or no need for the system, perhaps you need to reconsider the need to build a recommendation system in the first place. Finally, people\u2019s tastes don\u2019t stay static over time, and if a recommendation system isn\u2019t built to consider this fact, it may never be as accurate as it could be. Similarly, there is a risk of building a recommendation system that doesn\u2019t get better over time. As users continue to consume content and more data is available, your recommendation system should learn more about users and adapt to their tastes. A recommendation system not agile enough to continue to adapt can quickly become obsolete and won\u2019t serve its purpose. The moment that recommendations have the power to influence decisions, they become a target for spammers, scammers, and other people with less-than-noble motives for influencing our decisions. ~Daniel Tunkelang Why deep learning for recommendations? Deep learning can model the non-linear interactions in the data with non-linear activations such as ReLU, Sigmoid, Tanh\u2026 This property makes it possible to capture the complex and intricate user-item interaction patterns. Conventional methods such as matrix factorization and factorization machines are essentially linear models. This linear assumption, acting as the basis of many traditional recommenders, is oversimplified and will greatly limit their modeling expressiveness. It is well-established that neural networks are able to approximate any continuous function with arbitrary precision by varying the activation choices and combinations. This property makes it possible to deal with complex interaction patterns and precisely reflect the user\u2019s preference. Deep learning can efficiently learn the underlying explanatory factors and useful representations from input data. In general, a large amount of descriptive information about items and users is available in real-world applications. Making use of this information provides a way to advance our understanding of items and users, thus, resulting in a better recommender. As such, it is a natural choice to apply deep neural networks to representation learning in recommendation models. The advantages of using deep neural networks to assist representation learning are in two-folds: (1) it reduces the efforts in hand-craft feature design; and (2) it enables recommendation models to include heterogeneous content information such as text, images, audio, and even video. Deep learning is powerful for sequential modeling tasks. In tasks such as machine translation, natural language understanding, speech recognition, etc., RNNs and CNNs play critical roles. They are widely applicable and flexible in mining sequential structure in data. Modeling sequential signals is an important topic for mining the temporal dynamics of user behavior and item evolution. For example, next-item/basket prediction and session-based recommendations are typical applications. As such, deep neural networks become a perfect fit for this sequential pattern mining task. Deep learning possesses high flexibility. There are many popular deep learning frameworks nowadays, including TensorFlow, Keras, Caffe, MXnet, DeepLearning4j, PyTorch, Theano\u2026 These tools are developed in a modular way and have active community/professional support. The good modularization makes development and engineering a lot more efficient. For example, it is easy to combine different neural structures to formulate powerful hybrid models or replace one module with others. Thus, we could easily build hybrid and composite recommendation models to simultaneously capture different characteristics and factors. How recommendation engines benefit sites? Peoples\u2019 brains are designed in such a way that they always separate the main points from the background. When you visit a website and your eyes catch a piece of information that correlates with your own interests, you\u2019ll likely continue reading. Finding irrelevant information on a website creates the opposite effect. Therefore, media & e-commerce business owners, in collaboration with marketing specialists, began to research the personalization issue. The more relevant information the target audience gets, the more loyal it becomes. You don\u2019t need to carry out thorough market research to understand that a customer will be more willing to buy from a shop that gives them maximum help in finding what they\u2019re looking for as fast and easy as possible. They\u2019re also much more likely to return to that shop in the future. While there\u2019s a lot more to creating this kind of experience than recommendations, implementing a sophisticated solution is the cornerstone of a relevant and personalized customer journey . Curious about the business value of recommender systems? Netflix estimated that their recommendation engine is worth a yearly $1 billion for the company. Another telling example is when back in 2011 eBay acquired Hunch, a 2-year-old recommendation engine startup for $80 million. Amazon founder Jeff Bezos understood the value of recommender systems as early as 1998: \" In the online world, businesses have the opportunity to develop very deep relationships with customers, both through accepting preferences of customers and then observing their purchase behavior over time, so that you can get that individualized knowledge of the customer and use that individualized knowledge of the customer to accelerate their discovery process. If we can do that, then the customers are going to feel a deep loyalty to us, because we know them so well \". According to Amazon\u2019s much-cited statistic, 35% of their total revenues are coming from purchases of products that customers found through recommendations. A study from Accenture revealed that 91% of consumers are more likely to shop with brands who recognize, remember, and provide them with relevant offers and recommendations. Recommendations echo the items suggestions made by in-store sales representatives that some customers desire or require. This is taken care of on-site with the product recommendation engine, automatically generating suggestions based on a combination of rules. It provides the e-shoppers with the quickest and easiest way to view all items relevant to them. This can further motivate \u2018just browsing\u2019 visitors to make a purchase, help \u2018lost\u2019 customers find that ideal product, and encourage \u2018big\u2019 shoppers to add an item or two to their carts. It is crucial to understand the philosophy of the right things happening the right way at the right time. Using product recommendation efficiently will optimize your product discovery process, enhance customer experience, increase impulse purchases, higher engagement, conversions, average order value, loyalty, and retention. What else can a marketer need?","title":"Welcome to RecoBase"},{"location":"#welcome-to-recobase","text":"RecoBase is a collection of python code, notebooks and other essential resources to know and build recommender systems.","title":"Welcome to RecoBase"},{"location":"#what-is-a-recommender-system","text":"At their core, recommendation systems are nothing but similarity hunters. Depending on how you define \"similarity\" between two \"items\", you can a range of applications for these systems. Given any reasonable similarity function between items, a recommender system presents relevant items to a user. This similarity function between 2 items could be common users that have interacted with those items in the past, similarity in their attributes, similarity in context in which they are used, and so on. Recommendation engines are, at their core, information filtering tools that use algorithms and data to recommend the most relevant items to a particular user in a given context. Recommendation systems are built to predict what users might like, especially when there are lots of choices available. They can explicitly offer those recommendations to users (e.g., Amazon or Netflix, the classic examples), or they might work behind the scenes to choose which content to surface without giving the user a choice. Either way, the \u201cwhy\u201d is clear: they\u2019re critical for certain types of businesses because they can expose a user to content they may not have otherwise found or keep a user engaged for longer than they otherwise would have been. While building a simple recommendation system can be quite straightforward, the real challenge is to actually build one that works and where the business sees real uplift and value from its output. Recommendation systems can be built using a variety of techniques, from simple (e.g., based only on other rated items from the same user) to extremely complex. Complex recommendation systems leverage a variety of different data sources (one challenge is using unstructured data, especially images, as the input) and machine learning (including deep learning) techniques. Thus, they are well suited for the world of artificial intelligence and more specifically unsupervised learning; as users continue to consume content and provide more data, these systems can be built to provide better and better recommendations. Recommendation systems can be an effective way to expose users to content they may not have otherwise found, which in turn can forward larger business goals like increasing sales, advertising revenues, or user engagement. But there are a few key points to find success with recommendation systems. Namely, recommendation systems should be, above all, necessary. Building a complex system that requires experienced staff and ongoing maintenance when a simpler solution will do is a waste of data team resources that could be spent elsewhere for more impact. The challenge lies in building a system that will actually have a business impact; building the system in and of itself shouldn\u2019t be the end goal. Recommendation systems should also be agile. That is, adaptable and able to evolve as users do. Putting a recommendation system into production isn\u2019t the final step in the process; rather, it\u2019s an ongoing evolution, looking at what works, what doesn\u2019t, thinking about additional data sources that might help make better recommendations, etc A recommender system calculates and provides relevant content to the user based on knowledge of the user, content, and interactions between the user and the item. A recommendation is a particular form of information filtering, that exploits past behaviors and user similarities to generate a list of information items that is personally tailored to end-users preferences. In general, the recommendation lists are generated based on user preferences, item features, user-item past interactions, and some other additional information such as temporal and spatial data. In the last decade, the Internet has evolved into a platform for large-scale online services, which profoundly changed the way we communicate, read the news, buy products, and watch movies. In the meanwhile, the unprecedented number of items (we use the term item to refer to movies, news, books, and products.) offered online requires a system that can help us discover items that we preferred. Recommender systems are therefore powerful information filtering tools that can facilitate personalized services and provide tailored experiences to individual users. In short, recommender systems play a pivotal role in utilizing the wealth of data available to make choices manageable. ~d2lAI The benefits of employing recommender systems are two-folds: On the one hand, it can largely reduce users\u2019 effort in finding items and alleviate the issue of information overload. On the other hand, it can add business value to online service providers and is an important source of revenue. Users rely on recommender systems to filter out the numerous uninformative messages and facilitate decision making. An efficient recommender system should accurately capture users\u2019 preferences and suggest items that the users are potentially interested in, which can enhance users\u2019 satisfactory towards platform and improve user retention. They\u2019re critical for certain types of businesses because they can expose a user to content they may not have otherwise found or keep a user engaged for longer than they otherwise would have been. Recommender systems are mainly used for auto-suggesting the right content or product to the right users in a personalized manner to enhance the overall experience. Recommender systems are really powerful in terms of using huge amounts of data and learning to understand the preferences of specific users. Recommendations help users to easily navigate through millions of products or tons of content (articles/videos/movies) and show them the right item/information that they might like or buy. So, in simple terms, RS help discover information on behalf of the users. Now, it depends on the users to decide if RS did a good job at recommendations or not, and they can choose to either select the product/content or discard and move on. Each of the decisions of users (Positive or Negative) helps to retrain the RS on the latest data to be able to give even better recommendations. The \u201cWhat to Recommend\u201d part totally depends on the context in which RS are used and can help the business to increase revenues by providing the most likely items that users can buy or increasing the engagement by showcasing relevant content at the right time. RS take care of the critical aspect that the product or content that is being recommended should either be something which users might like but would not have discovered on their own. Along with that, RS also need an element of varied recommendations to keep it interesting enough. A few examples of heavy usage of RS by businesses today such as Amazon products, Facebook\u2019s friend suggestions, LinkedIn\u2019s \u201cPeople you may know,\u201d Netflix\u2019s movie, YouTube\u2019s videos, Spotify\u2019s music, and Coursera\u2019s courses. Some of the immediate benefits that RS offer in retail settings are: 1. Increased Revenue 2. Positive Reviews and Ratings by Users 3. Increased Engagement. Recommendations break down into two different categories: Exploitation: This is a sensible suggestion. For instance, if you listen to a lot of classical music, perhaps you should listen to Bach. Exploration: this is the irrational suggestion\u2014chaos. Sometimes you don\u2019t want to listen to Bach; sometimes you want to listen to Bachman Turner Overdrive. Now, why do we even make recommendations in the first place? And this is an essential thing to realize, because recommendations are taking the haystack and finding the needle within it. Sometimes when going to a restaurant, the menu can overwhelm. That\u2019s when the server would make a recommendation. What we want to do is automate that. Because if you are on YouTube or Spotify, you might have millions of items on the menu. Walk past any store in the world and you\u2019ll see the same tactics in effect: window displays showing the brand\u2019s most attractive, best-selling products. Entering the store will see smaller displays like mannequins, collections, or recommended setups. These are traditional methods of recommending products to shoppers \u2013 of showing potential customers what is currently in fashion to form a connection and suggesting what they might want to buy. While eCommerce doesn\u2019t have glass windows, well-executed product recommendations can offer even more to digital brands.","title":"What is a Recommender System?"},{"location":"#the-rise-of-recommendation-engines","text":"Historically, marketing recommendations were human-built. Based on qualitative and quantitative marketing studies, marketing moguls would set up rules that statically defined the impression (in the sense of advertising views) sent to a customer with given characteristics. This technique gave rise to the marketing data mining urban legend that a grocery chain discovered that men who bought diapers on Thursdays and Saturdays were more likely to buy beer as well and hence placing the two next to each other will increase beer sales. Overall, recommendation engines created manually presented numerous bottlenecks that resulted in a significant amount of wasted money: it was hard to build rules based on many different customer features because the rule creation process was manual, it was hard to set up experiments to test many different kinds of impressions, and it was hard to update the rules when the behavior of the customers changed. The Role of Machine Learning The rise of ML has brought a new paradigm to recommendation engines, allowing for the elimination of rules based on human insight. A new class of algorithm called collaborative filtering dominates the field. This algorithm is able to analyze customer and purchase data with millions of customers and tens of thousands of products to perform recommendations without any prior marketing knowledge. By identifying efficiently what customers that look like the current customer bought, marketers can rely on automatic strategies that outperform traditional ones both in cost and efficiency. Because the process of building strategies is automatic, it is possible to update them regularly and to compare them using A/B testing or shadow scoring schemes (including the way to choose the impression among all possibilities). Note that these algorithms may be combined with more classical business rules for various reasons\u2014e.g., avoiding the filtering bubble, not selling a product in a given geographical area, or preventing the use of a specific association that is statistically meaningful but unethical to use (like proposing alcohol to a recovering alcoholic), to name a few. Push or Pull? When implementing a recommendation engine, it is important to keep in mind that its structure will depend on whether the recommendations are pushed or pulled. Push channels are the easiest to handle; for example, they can consist of sending emails or making outbound calls. The recommendation engine can be run on a regular basis in batch mode (typically between once a day and once a month), and it is easy to split the customer dataset into several parts to perform analysis within a sound experimental design. The regularity of the process allows for regular review and optimization of the strategy. Pull channels are often more effective because they provide information to customers when they need it\u2014for example, when doing an online search or when calling a customer service line. Specific information from the session can be used (e.g., what the user has searched for) to precisely tailor the recommendation. Music streaming platforms, for instance, provide pull-channel recommendations for playlists. Recommendations can be prebaked, as illustrated in the in-depth example in this chapter, or made in real time. In the latter case, a special architecture has to be set up to compute recommendations on the fly. Comparing strategies in a pull context is more challenging. First, the customers who call in on a given channel are likely to differ from the average customer. In simple cases, it is possible to randomly choose the strategy to use for each recommendation, but it also happens that the strategy needs to be used consistently over a given period for a given customer. This usually results in an unbalanced proportion of recommendations made with each strategy, which makes the statistical treatment to decide which one is the best more complex. However, once a good framework is set, this allows a very quick improvement cycle, as many strategies can be tested in real time. Almost everything we buy or consume today is influenced by some form of recommendation; whether that's from friends, family, external reviews, and, more recently, from the sources selling you the product. When you log on to Netflix or Amazon Prime, for example, you will see a list of movies and television shows the service thinks you will like based on your past watching (and rating) history. Facebook suggests people it thinks you may know and would probably like to add. It also curates a News Feed for you based on the posts you've liked, the people you've be-friended, and the pages you've followed. Amazon recommends items to you as you browse for a particular product. It shows you similar products from a competing source and suggests auxiliary items frequently bought together with the product.","title":"The Rise of Recommendation Engines"},{"location":"#why-do-online-platforms-need-personalization-capabilities","text":"Personalization helps customers discover products and content that can meet their needs and interests. It motivates engagement on digital properties, as customers see more of what they want and like. This growth in engagement can be observed through measurable improvements in metrics such as Click-Through-Rates (CTR), watch durations on videos, dwell times on articles and bounce rates. On top of all this, personalization is proven to improve conversions, resulting in growth in revenues or other desired outcomes. The massive business potential observed in personalization motivated foresighted companies such as Amazon to invest and capitalize on the technology very early on. Amazon uses personalization intensively across their suite of platforms ranging from the Amazon.com website to Amazon Prime Video, Amazon Kindle, Amazon Music and more. Today, the algorithms have become significantly advanced, seen in widgets that recommend based on browsing history or from categories that are of high interest to the customer.","title":"Why do online platforms need personalization capabilities?"},{"location":"#personalization-challenges","text":"A common approach to starting personalization is with a rule based system that is designed with pre-existing ideas or trends in mind, for eg. a retailer recommending boots to women who visit their website from New York at the start of winter. This system makes sense, however, it misses out on capturing the diversity of needs across people as user numbers and catalog sizes grow. Hence using machine learning should prove a better solution, producing a comprehensive algorithm more catered to individual level recommendations. Working with ML however, comes along with some challenges: Recommendation systems should respond to the actions and intentions of a user in real time and they should be able to effectively handle new users and new items in the catalog \u2013 a common challenge for ML systems. Recommendations should not have biases for popular goods, pushing the most relevant product or content based on the needs of the customer. Algorithms are not one size fits all, requiring customizations for different use cases. Building good personalization models is very hard, requiring a high level of ML expertise. These complexities push people away from using ML, choosing to go with rule based systems or no personalization at all. Using a rule based system may come with lesser complications, however they present poor performance, poor scalability and a high cost and effort of maintenance. Those that choose to tackle machine learning tools for better results can also find them hard to build and manage, in addition to their limitations in matching recommendations with customer intent and managing real-time personalization for new customers. Personalization engines suggest relevant content with the objective of maximizing a specific metric. For example: a news website might want to increase the number of clicks in a session; on the other hand, for an e-commerce app it is very important to identify visitors that are more likely to buy a product in order to target them with special offers. Personalization is a very broad concept. In this case, personalization equates to leveraging engagement data to build an interest profile for a user. Many of the apps you use every day leverage machine learning to personalize your feeds. Here are 4 examples: Instagram created an \u201cExplore\u201d section that shows you pictures you\u2019re likely to be interested in, based on your past clicks, likes and engagement. Quora uses your engagement data, like the posts that you search for and comment on, to personalize your feed experience and emails. Facebook uses advanced machine learning to prioritize posts from the friends you engage with most, after starting out with just a basic edge rank algorithm. Etsy analyzes your search and shopping behavior to optimize your newsfeed, email and e-commerce conversion.","title":"Personalization Challenges"},{"location":"#scalability","text":"It\u2019s important to create a recommendation system that will scale with the amount of data you have. If it\u2019s built for a limited dataset and that dataset grows, computation costs grow exponentially, and the system will be unable to handle the amount of data. To avoid having to rebuild your recommendation system later on, you must ensure from the beginning it is built to scale to expected data volumes. Scalability is critical to the usefulness of recommendation systems in industry settings. To that end, recommendation models can definitely be more efficient by exploring these following problems: Incremental learning for non-stationary and streaming data (large volume of incoming users and items) Computational efficiency for high-dimensional tensors and multimedia data sources Balancing the complexity and scalability as the model\u2019s parameters increase exponentially A promising research area is to use compression techniques to compact the embedding space of high-dimensional input data, which can reduce the computation time during model learning. Another promising approach is to distill knowledge to learn compact models for inference in recommendation systems. The key concept is to train a small student model that absorbs knowledge from a large teacher model.","title":"Scalability"},{"location":"#agility","text":"People\u2019s tastes don\u2019t stay static over time, and if a recommendation system isn\u2019t built to consider this fact, it may never be as accurate as it could be. Similarly, there is a risk of building a recommendation system that doesn\u2019t get better over time. As users continue to consume content and more data is available, your recommendation system should learn more about users and adapt to their tastes. A recommendation system not agile enough to continue to adapt can quickly become obsolete and won\u2019t serve its purpose. It\u2019s important to create a recommendation system that will scale with the amount of data you have. If it\u2019s built for a limited dataset and that dataset grows, computation costs grow exponentially, and the system will be unable to handle the amount of data. To avoid having to rebuild your recommendation system later on, you must ensure from the beginning it is built to scale to expected data volumes. It\u2019s also possible that after spending time, energy, and resources on building a recommendation system (and even after having enough data and good initial results) that the recommendation system only makes very obvious recommendations . The crux of avoiding this pitfall really harkens back to the first of the seven steps: understand the business need. If there isn\u2019t enough of a content long-tail or no need for the system, perhaps you need to reconsider the need to build a recommendation system in the first place. Finally, people\u2019s tastes don\u2019t stay static over time, and if a recommendation system isn\u2019t built to consider this fact, it may never be as accurate as it could be. Similarly, there is a risk of building a recommendation system that doesn\u2019t get better over time. As users continue to consume content and more data is available, your recommendation system should learn more about users and adapt to their tastes. A recommendation system not agile enough to continue to adapt can quickly become obsolete and won\u2019t serve its purpose. The moment that recommendations have the power to influence decisions, they become a target for spammers, scammers, and other people with less-than-noble motives for influencing our decisions. ~Daniel Tunkelang","title":"Agility"},{"location":"#why-deep-learning-for-recommendations","text":"Deep learning can model the non-linear interactions in the data with non-linear activations such as ReLU, Sigmoid, Tanh\u2026 This property makes it possible to capture the complex and intricate user-item interaction patterns. Conventional methods such as matrix factorization and factorization machines are essentially linear models. This linear assumption, acting as the basis of many traditional recommenders, is oversimplified and will greatly limit their modeling expressiveness. It is well-established that neural networks are able to approximate any continuous function with arbitrary precision by varying the activation choices and combinations. This property makes it possible to deal with complex interaction patterns and precisely reflect the user\u2019s preference. Deep learning can efficiently learn the underlying explanatory factors and useful representations from input data. In general, a large amount of descriptive information about items and users is available in real-world applications. Making use of this information provides a way to advance our understanding of items and users, thus, resulting in a better recommender. As such, it is a natural choice to apply deep neural networks to representation learning in recommendation models. The advantages of using deep neural networks to assist representation learning are in two-folds: (1) it reduces the efforts in hand-craft feature design; and (2) it enables recommendation models to include heterogeneous content information such as text, images, audio, and even video. Deep learning is powerful for sequential modeling tasks. In tasks such as machine translation, natural language understanding, speech recognition, etc., RNNs and CNNs play critical roles. They are widely applicable and flexible in mining sequential structure in data. Modeling sequential signals is an important topic for mining the temporal dynamics of user behavior and item evolution. For example, next-item/basket prediction and session-based recommendations are typical applications. As such, deep neural networks become a perfect fit for this sequential pattern mining task. Deep learning possesses high flexibility. There are many popular deep learning frameworks nowadays, including TensorFlow, Keras, Caffe, MXnet, DeepLearning4j, PyTorch, Theano\u2026 These tools are developed in a modular way and have active community/professional support. The good modularization makes development and engineering a lot more efficient. For example, it is easy to combine different neural structures to formulate powerful hybrid models or replace one module with others. Thus, we could easily build hybrid and composite recommendation models to simultaneously capture different characteristics and factors.","title":"Why deep learning for recommendations?"},{"location":"#how-recommendation-engines-benefit-sites","text":"Peoples\u2019 brains are designed in such a way that they always separate the main points from the background. When you visit a website and your eyes catch a piece of information that correlates with your own interests, you\u2019ll likely continue reading. Finding irrelevant information on a website creates the opposite effect. Therefore, media & e-commerce business owners, in collaboration with marketing specialists, began to research the personalization issue. The more relevant information the target audience gets, the more loyal it becomes. You don\u2019t need to carry out thorough market research to understand that a customer will be more willing to buy from a shop that gives them maximum help in finding what they\u2019re looking for as fast and easy as possible. They\u2019re also much more likely to return to that shop in the future. While there\u2019s a lot more to creating this kind of experience than recommendations, implementing a sophisticated solution is the cornerstone of a relevant and personalized customer journey . Curious about the business value of recommender systems? Netflix estimated that their recommendation engine is worth a yearly $1 billion for the company. Another telling example is when back in 2011 eBay acquired Hunch, a 2-year-old recommendation engine startup for $80 million. Amazon founder Jeff Bezos understood the value of recommender systems as early as 1998: \" In the online world, businesses have the opportunity to develop very deep relationships with customers, both through accepting preferences of customers and then observing their purchase behavior over time, so that you can get that individualized knowledge of the customer and use that individualized knowledge of the customer to accelerate their discovery process. If we can do that, then the customers are going to feel a deep loyalty to us, because we know them so well \". According to Amazon\u2019s much-cited statistic, 35% of their total revenues are coming from purchases of products that customers found through recommendations. A study from Accenture revealed that 91% of consumers are more likely to shop with brands who recognize, remember, and provide them with relevant offers and recommendations. Recommendations echo the items suggestions made by in-store sales representatives that some customers desire or require. This is taken care of on-site with the product recommendation engine, automatically generating suggestions based on a combination of rules. It provides the e-shoppers with the quickest and easiest way to view all items relevant to them. This can further motivate \u2018just browsing\u2019 visitors to make a purchase, help \u2018lost\u2019 customers find that ideal product, and encourage \u2018big\u2019 shoppers to add an item or two to their carts. It is crucial to understand the philosophy of the right things happening the right way at the right time. Using product recommendation efficiently will optimize your product discovery process, enhance customer experience, increase impulse purchases, higher engagement, conversions, average order value, loyalty, and retention. What else can a marketer need?","title":"How recommendation engines benefit sites?"},{"location":"Datasets/","text":"Shopping Amazon : This dataset contains product reviews, only-rating data (ratings) and metadata(descriptions, category information, price, brand, and image features) from Amazon, including 142.8 million reviews spanning May 1996 - July 2014. Epinions : This dataset was collected from Epinions.com, a popular online consumer review website. It contains trust relationships amongst users and spans more than a decade, from January 2001 to November 2013. Yelp : This dataset was collected from Yelp.com. The Yelp dataset is a subset of our businesses, reviews, and user data for use in personal, educational, and academic purposes. Tmall : This dataset is provided by Ant Financial Services, using in the IJCAI16 contest. DIGINETICA : The dataset includes user sessions extracted from an e-commerce search engine logs, with anonymized user ids, hashed queries, hashed query terms, hashed product descriptions and meta-data, log-scaled prices, clicks, and purchases. YOOCHOOSE : This dataset was constructed by YOOCHOOSE GmbH to support participants in the RecSys Challenge 2015. Retailrocket : The data has been collected from a real-world ecommerce website. It is raw data, i.e. without any content transformations, however, all values are hashed due to confidential issues. Ta Feng : The dataset contains a Chinese grocery store transaction data from November 2000 to February 2001. Advertising Criteo : This dataset was collected from Criteo, which consists of a portion of Criteo's traffic over a period of several days. Avazu : This dataset is used in Avazu CTR prediction contest. iPinYou : This dataset was provided by iPinYou, which contains all training datasets and leaderboard testing datasets of the three seasons iPinYou Global RTB(Real-Time Bidding) Bidding Algorithm Competition. Check-in Foursquare : This dataset contains check-ins in NYC and Tokyo collected for about 10 month. Each check-in is associated with its time stamp, its GPS coordinates and its semantic meaning. Gowalla : This dataset is from a location-based social networking website where users share their locations by checking-in, and contains a total of 6,442,890 check-ins of these users over the period of Feb. 2009 - Oct. 2010. Movies MovieLens : GroupLens Research has collected and made available rating datasets from their movie web site. Netflix : This is the official data set used in the Netflix Prize competition. Douban : Douban Movie is a Chinese website that allows Internet users to share their comments and viewpoints about movies. This dataset contains more than 2 million short comments of 28 movies in Douban Movie website. Music Last.FM : This dataset contains social networking, tagging, and music artist listening information from a set of 2K users from Last.fm online music system. LFM-1b : This dataset contains more than one billion music listening events created by more than 120,000 users of Last.FM. Each listening event is characterized by artist, album, and track name, and includes a timestamp. Yahoo Music : This dataset represents a snapshot of the Yahoo! Music community's preferences for various musical artists. Books Book-Crossing : This dataset was collected by Cai-Nicolas Ziegler in a 4-week crawl (August / September 2004) from the Book-Crossing community with kind permission from Ron Hornbaker, CTO of Humankind Systems . It contains 278,858 users (anonymized but with demographic information) providing 1,149,780 ratings (explicit / implicit) about 271,379 books. Games Steam : This dataset is reviews and game information from Steam, which contains 7,793,069 reviews, 2,567,538 users, and 32,135 games. In addition to the review text, the data also includes the users' play hours in each review. Anime Anime : This dataset contains information on user preference data from myanimelist.net. Each user is able to add anime to their completed list and give it a rating and this dataset is a compilation of those ratings. Pictures Pinterest : This dataset is originally constructed by paper Learning image and user features for recommendations in social networks for evaluating content-based image recommendation, and processed by paper Neural Collaborative Filtering. Jokes Jester : This dataset contains anonymous ratings of jokes by users of the Jester Joke Recommender System. Exercises KDD2010 : This dataset was released in KDD Cup 2010 Educational Data Mining Challenge, which contains the situations of students submitting exercises on the systems. Websites Phishing Websites : This dataset contains 30 kinds of features of 11,055 websites and labels of whether they are phishing websites or not. The websites' features includes 12 address-bar based features, 6 abnormal based features, 5 HTML-and-JavaScript based features and 7 domain based features. Adult Adult : This dataset is extracted by Barry Becker from the 1994 Census database, which consists of a list of people's attributes and whether they make over 50k a year. News MIND This dataset is a large-scale dataset for news recommendation research. It was collected from anonymized behavior logs of Microsoft News website. MIND contains about 160k English news articles and more than 15 million impression logs generated by 1 million users. Uncategorized Douban This is the anonymized Douban dataset contains 129,490 unique users and 58,541 unique movie items. Epinions Epinions is a website where people can review products. Flixster Flixster is a social movie site allowing users to share movie ratings, discover new movies and meet others with similar movie taste. CiaoDVD CiaoDVD is a dataset crawled from the entire category of DVDs from the dvd.ciao.co.uk website in December, 2013 MACLab With the text in the post, the mood tag, and the music title, this project is aimed at studying the users' moods and music emotions. DEAPdataset A dataset for emotion analysis using eeg, physiological and video signals. MyPersonalityDataset myPersonality was a popular Facebook application that allowed users to take real psychometric tests, and allowed us to record (with consent!) their psychological and Facebook profiles. Currently, our database contains more than 6,000,000 test results, together with more than 4,000,000 individual Facebook profiles. Bibsonomy Tag Recommendations in Social Bookmarking Systems. Delicious plista News Recommendation Dataset and Delicious. Movielens Stable benchmark dataset. 20 million ratings and 465,000 tag applications applied to 27,000 movies by 138,000 users. Includes tag genome data with 12 million relevance scores across 1,100 tags. Jester Anonymous Ratings from the Jester Online Joke Recommender System. BookCrossing Book-Crossing Dataset. LastFM 92,800 artist listening records from 1892 users. Wikipedia Wikipedia offers free copies of all available content to interested users. These databases can be used for mirroring, personal use, informal backups, offline use or database queries. OpenStreetMap The files found here are complete copies of the OpenStreetMap.org database, including editing history. These are published under an Open Data Commons Open Database License 1.0 licensed. For more information. PythonGitCode Hermes is Lab41's foray into recommender systems. It explores how to choose a recommender system for a new application by analyzing the performance of multiple recommender system algorithms on a variety of datasets. Gist Recommendation and Ratings Public Data Sets For Machine Learning. Yelp The Yelp dataset is a subset of our businesses, reviews, and user data for use in personal, educational, and academic purposes. Available in both JSON and SQL files, use it to teach students about databases, to learn NLP, or for sample production data while you learn how to make mobile apps AmazonReviews This dataset contains product reviews and metadata from Amazon, including 142.8 million reviews spanning May 1996 - July 2014. This dataset includes reviews (ratings, text, helpfulness votes), product metadata (descriptions, category information, price, brand, and image features), and links (also viewed/also bought graphs). CiteULike The CiteULike database is potentially useful for researchers in various fields. Physicists and computer scientists have expressed an interest in trying to analyse the structure of the data, and frequently ask for datasets to be made available. Previously this was done on an ad-hoc basis, and it relied on us remembering to update the data file. Now, there is an automatic process which runs every night producing a snapshot summary of what articles have been posted with which tags. Taobao The data set contains anonymized users' shopping logs in the past 6 months before and on the \"Double 11\" day,and the label information indicating whether they are repeated buyers. Due to privacy issue, data is sampled in a biased way, so the statistical result on this data set would deviate from the actual of Tmall.com. Statistics Data Set Users Items Ratings (Scale) Density Users Links (Type) Ciao 7,375 99,746 278,483--[1, 5] 0.0379% 7,375 111,781--Trust Douban 129,490 58,541 16,830,839--[1, 5] 0.222% 129,490 1,692,952--Friendship Epinions (665K) 40,163 139,738 664,824--[1, 5] 0.0118% 49,289 487,183--Trust Epinions (510K) 71,002 104,356 508,960--[1, 5] 0.00687% Trust Epinions (Extended) 120,492 755,760 13,668,320--[1, 5] 0.015% Trust Distrust Flixster 147,612 48,794 8,196,077--[0.5, 5.0] 0.1138% 787,213 11,794,648--Friendship FilmTrust 1,508 2,071 35,497--[0.5, 4.0] 1.14% 1,642 1,853--Trust Jester 59,132 140 1,761,439--Explicit 21.28% MovieLens 100K 943 1,682 100,000--[1, 5] 6.30% MovieLens 1M 6,040 3,706 1,000,209--[1, 5] 4.47% MovieLens 10M 71,567 10,681 10,000,054--[1, 5] 1.308% SN Dataset #User #Item #Inteaction Sparsity Interaction Type 1 MovieLens - - - - Rating 2 Anime 73,515 11,200 7,813,737 99.05% Rating [-1, 1-10] 3 Epinions 116,260 41,269 188,478 99.99% Rating [1-5] 4 Yelp 1,968,703 209,393 8,021,122 99.99% Rating [1-5] 5 Netflix 480,189 17,770 100,480,507 98.82% Rating [1-5] 6 Book-crossing 105,284 340,557 1,149,780 99.99% Rating [0-10] 7 Jester 73,421 101 4,136,360 44.22% Rating [-10, 10] 8 Douban 738,701 28 2,125,056 89.73% Rating [0,5] 9 Yahoo Music 1,948,882 98,211 11,557,943 99.99% Rating [0, 100] 10 KDD2010 - - - - Rating 11 Amazon - - - - Rating 12 Pinterest 55,187 9,911 1,445,622 99.74% - 13 Gowalla 107,092 1,280,969 6,442,892 99.99% Check-in 14 LastFM 1,892 17,632 92,834 99.72% Click 15 DIGINETICA 600,684 184,047 993,483 99.99% Click 16 Steam 2,567,538 32,135 7,793,069 99.99% Buy 17 Ta Feng 32,266 23,812 817,741 99.89% Click 18 Foursquare - - - - Check-in 19 Tmall 963,923 2,353,207 44,528,127 99.99% Click/Buy 20 YOOCHOOSE 9,249,729 52,739 34,154,697 99.99% Click/Buy 21 iPinYou 12,931,430 131 15,367,312 99.09% View/Click 22 Retailrocket 1,407,580 247,085 2,756,101 99.99% View/Addtocart/Transaction 23 LFM-1b 120,322 3,123,496 1,088,161,692 99.71% Click 24 Criteo - - 45,850,617 - Click 25 Avazu - - 40,428,967 - Click [0, 1] 26 Phishing Websites - - 11,055 - 27 Adult - - 32,561 - income>=50k [0, 1] 28 MIND - - - - Click Data Sources Google Drive Baidu Wangpan (Password: e272) References RecBole https://github.com/RUCAIBox/RecSysDatasets Appendix Table format - Google Sheet","title":"Datasets"},{"location":"Datasets/#shopping","text":"Amazon : This dataset contains product reviews, only-rating data (ratings) and metadata(descriptions, category information, price, brand, and image features) from Amazon, including 142.8 million reviews spanning May 1996 - July 2014. Epinions : This dataset was collected from Epinions.com, a popular online consumer review website. It contains trust relationships amongst users and spans more than a decade, from January 2001 to November 2013. Yelp : This dataset was collected from Yelp.com. The Yelp dataset is a subset of our businesses, reviews, and user data for use in personal, educational, and academic purposes. Tmall : This dataset is provided by Ant Financial Services, using in the IJCAI16 contest. DIGINETICA : The dataset includes user sessions extracted from an e-commerce search engine logs, with anonymized user ids, hashed queries, hashed query terms, hashed product descriptions and meta-data, log-scaled prices, clicks, and purchases. YOOCHOOSE : This dataset was constructed by YOOCHOOSE GmbH to support participants in the RecSys Challenge 2015. Retailrocket : The data has been collected from a real-world ecommerce website. It is raw data, i.e. without any content transformations, however, all values are hashed due to confidential issues. Ta Feng : The dataset contains a Chinese grocery store transaction data from November 2000 to February 2001.","title":"Shopping"},{"location":"Datasets/#advertising","text":"Criteo : This dataset was collected from Criteo, which consists of a portion of Criteo's traffic over a period of several days. Avazu : This dataset is used in Avazu CTR prediction contest. iPinYou : This dataset was provided by iPinYou, which contains all training datasets and leaderboard testing datasets of the three seasons iPinYou Global RTB(Real-Time Bidding) Bidding Algorithm Competition.","title":"Advertising"},{"location":"Datasets/#check-in","text":"Foursquare : This dataset contains check-ins in NYC and Tokyo collected for about 10 month. Each check-in is associated with its time stamp, its GPS coordinates and its semantic meaning. Gowalla : This dataset is from a location-based social networking website where users share their locations by checking-in, and contains a total of 6,442,890 check-ins of these users over the period of Feb. 2009 - Oct. 2010.","title":"Check-in"},{"location":"Datasets/#movies","text":"MovieLens : GroupLens Research has collected and made available rating datasets from their movie web site. Netflix : This is the official data set used in the Netflix Prize competition. Douban : Douban Movie is a Chinese website that allows Internet users to share their comments and viewpoints about movies. This dataset contains more than 2 million short comments of 28 movies in Douban Movie website.","title":"Movies"},{"location":"Datasets/#music","text":"Last.FM : This dataset contains social networking, tagging, and music artist listening information from a set of 2K users from Last.fm online music system. LFM-1b : This dataset contains more than one billion music listening events created by more than 120,000 users of Last.FM. Each listening event is characterized by artist, album, and track name, and includes a timestamp. Yahoo Music : This dataset represents a snapshot of the Yahoo! Music community's preferences for various musical artists.","title":"Music"},{"location":"Datasets/#books","text":"Book-Crossing : This dataset was collected by Cai-Nicolas Ziegler in a 4-week crawl (August / September 2004) from the Book-Crossing community with kind permission from Ron Hornbaker, CTO of Humankind Systems . It contains 278,858 users (anonymized but with demographic information) providing 1,149,780 ratings (explicit / implicit) about 271,379 books.","title":"Books"},{"location":"Datasets/#games","text":"Steam : This dataset is reviews and game information from Steam, which contains 7,793,069 reviews, 2,567,538 users, and 32,135 games. In addition to the review text, the data also includes the users' play hours in each review.","title":"Games"},{"location":"Datasets/#anime","text":"Anime : This dataset contains information on user preference data from myanimelist.net. Each user is able to add anime to their completed list and give it a rating and this dataset is a compilation of those ratings.","title":"Anime"},{"location":"Datasets/#pictures","text":"Pinterest : This dataset is originally constructed by paper Learning image and user features for recommendations in social networks for evaluating content-based image recommendation, and processed by paper Neural Collaborative Filtering.","title":"Pictures"},{"location":"Datasets/#jokes","text":"Jester : This dataset contains anonymous ratings of jokes by users of the Jester Joke Recommender System.","title":"Jokes"},{"location":"Datasets/#exercises","text":"KDD2010 : This dataset was released in KDD Cup 2010 Educational Data Mining Challenge, which contains the situations of students submitting exercises on the systems.","title":"Exercises"},{"location":"Datasets/#websites","text":"Phishing Websites : This dataset contains 30 kinds of features of 11,055 websites and labels of whether they are phishing websites or not. The websites' features includes 12 address-bar based features, 6 abnormal based features, 5 HTML-and-JavaScript based features and 7 domain based features.","title":"Websites"},{"location":"Datasets/#adult","text":"Adult : This dataset is extracted by Barry Becker from the 1994 Census database, which consists of a list of people's attributes and whether they make over 50k a year.","title":"Adult"},{"location":"Datasets/#news","text":"MIND This dataset is a large-scale dataset for news recommendation research. It was collected from anonymized behavior logs of Microsoft News website. MIND contains about 160k English news articles and more than 15 million impression logs generated by 1 million users.","title":"News"},{"location":"Datasets/#uncategorized","text":"Douban This is the anonymized Douban dataset contains 129,490 unique users and 58,541 unique movie items. Epinions Epinions is a website where people can review products. Flixster Flixster is a social movie site allowing users to share movie ratings, discover new movies and meet others with similar movie taste. CiaoDVD CiaoDVD is a dataset crawled from the entire category of DVDs from the dvd.ciao.co.uk website in December, 2013 MACLab With the text in the post, the mood tag, and the music title, this project is aimed at studying the users' moods and music emotions. DEAPdataset A dataset for emotion analysis using eeg, physiological and video signals. MyPersonalityDataset myPersonality was a popular Facebook application that allowed users to take real psychometric tests, and allowed us to record (with consent!) their psychological and Facebook profiles. Currently, our database contains more than 6,000,000 test results, together with more than 4,000,000 individual Facebook profiles. Bibsonomy Tag Recommendations in Social Bookmarking Systems. Delicious plista News Recommendation Dataset and Delicious. Movielens Stable benchmark dataset. 20 million ratings and 465,000 tag applications applied to 27,000 movies by 138,000 users. Includes tag genome data with 12 million relevance scores across 1,100 tags. Jester Anonymous Ratings from the Jester Online Joke Recommender System. BookCrossing Book-Crossing Dataset. LastFM 92,800 artist listening records from 1892 users. Wikipedia Wikipedia offers free copies of all available content to interested users. These databases can be used for mirroring, personal use, informal backups, offline use or database queries. OpenStreetMap The files found here are complete copies of the OpenStreetMap.org database, including editing history. These are published under an Open Data Commons Open Database License 1.0 licensed. For more information. PythonGitCode Hermes is Lab41's foray into recommender systems. It explores how to choose a recommender system for a new application by analyzing the performance of multiple recommender system algorithms on a variety of datasets. Gist Recommendation and Ratings Public Data Sets For Machine Learning. Yelp The Yelp dataset is a subset of our businesses, reviews, and user data for use in personal, educational, and academic purposes. Available in both JSON and SQL files, use it to teach students about databases, to learn NLP, or for sample production data while you learn how to make mobile apps AmazonReviews This dataset contains product reviews and metadata from Amazon, including 142.8 million reviews spanning May 1996 - July 2014. This dataset includes reviews (ratings, text, helpfulness votes), product metadata (descriptions, category information, price, brand, and image features), and links (also viewed/also bought graphs). CiteULike The CiteULike database is potentially useful for researchers in various fields. Physicists and computer scientists have expressed an interest in trying to analyse the structure of the data, and frequently ask for datasets to be made available. Previously this was done on an ad-hoc basis, and it relied on us remembering to update the data file. Now, there is an automatic process which runs every night producing a snapshot summary of what articles have been posted with which tags. Taobao The data set contains anonymized users' shopping logs in the past 6 months before and on the \"Double 11\" day,and the label information indicating whether they are repeated buyers. Due to privacy issue, data is sampled in a biased way, so the statistical result on this data set would deviate from the actual of Tmall.com.","title":"Uncategorized"},{"location":"Datasets/#statistics","text":"Data Set Users Items Ratings (Scale) Density Users Links (Type) Ciao 7,375 99,746 278,483--[1, 5] 0.0379% 7,375 111,781--Trust Douban 129,490 58,541 16,830,839--[1, 5] 0.222% 129,490 1,692,952--Friendship Epinions (665K) 40,163 139,738 664,824--[1, 5] 0.0118% 49,289 487,183--Trust Epinions (510K) 71,002 104,356 508,960--[1, 5] 0.00687% Trust Epinions (Extended) 120,492 755,760 13,668,320--[1, 5] 0.015% Trust Distrust Flixster 147,612 48,794 8,196,077--[0.5, 5.0] 0.1138% 787,213 11,794,648--Friendship FilmTrust 1,508 2,071 35,497--[0.5, 4.0] 1.14% 1,642 1,853--Trust Jester 59,132 140 1,761,439--Explicit 21.28% MovieLens 100K 943 1,682 100,000--[1, 5] 6.30% MovieLens 1M 6,040 3,706 1,000,209--[1, 5] 4.47% MovieLens 10M 71,567 10,681 10,000,054--[1, 5] 1.308% SN Dataset #User #Item #Inteaction Sparsity Interaction Type 1 MovieLens - - - - Rating 2 Anime 73,515 11,200 7,813,737 99.05% Rating [-1, 1-10] 3 Epinions 116,260 41,269 188,478 99.99% Rating [1-5] 4 Yelp 1,968,703 209,393 8,021,122 99.99% Rating [1-5] 5 Netflix 480,189 17,770 100,480,507 98.82% Rating [1-5] 6 Book-crossing 105,284 340,557 1,149,780 99.99% Rating [0-10] 7 Jester 73,421 101 4,136,360 44.22% Rating [-10, 10] 8 Douban 738,701 28 2,125,056 89.73% Rating [0,5] 9 Yahoo Music 1,948,882 98,211 11,557,943 99.99% Rating [0, 100] 10 KDD2010 - - - - Rating 11 Amazon - - - - Rating 12 Pinterest 55,187 9,911 1,445,622 99.74% - 13 Gowalla 107,092 1,280,969 6,442,892 99.99% Check-in 14 LastFM 1,892 17,632 92,834 99.72% Click 15 DIGINETICA 600,684 184,047 993,483 99.99% Click 16 Steam 2,567,538 32,135 7,793,069 99.99% Buy 17 Ta Feng 32,266 23,812 817,741 99.89% Click 18 Foursquare - - - - Check-in 19 Tmall 963,923 2,353,207 44,528,127 99.99% Click/Buy 20 YOOCHOOSE 9,249,729 52,739 34,154,697 99.99% Click/Buy 21 iPinYou 12,931,430 131 15,367,312 99.09% View/Click 22 Retailrocket 1,407,580 247,085 2,756,101 99.99% View/Addtocart/Transaction 23 LFM-1b 120,322 3,123,496 1,088,161,692 99.71% Click 24 Criteo - - 45,850,617 - Click 25 Avazu - - 40,428,967 - Click [0, 1] 26 Phishing Websites - - 11,055 - 27 Adult - - 32,561 - income>=50k [0, 1] 28 MIND - - - - Click","title":"Statistics"},{"location":"Datasets/#data-sources","text":"Google Drive Baidu Wangpan (Password: e272)","title":"Data Sources"},{"location":"Datasets/#references","text":"RecBole https://github.com/RUCAIBox/RecSysDatasets","title":"References"},{"location":"Datasets/#appendix","text":"Table format - Google Sheet","title":"Appendix"},{"location":"Examples/","text":"Domain Services Examples Media and Entertainment TV, Movies, music, books and other media content websites Netflix, Apple Music, YouTube, Pandora Radio, Spotify eCommerce Online shops, crowdsourcing platforms, and peer-to-peer marketplaces Amazon, Taobao, Facebook marketplace, Arcbazar, Etsy, eBay Education Online courses, educational materials Coursera, Udemy, EdX Real Estate and Travel Tours, hotels, car rentals, restaurants, flights booking websites Airbnb, Expedia, Uber Jobs Jobs portals and professional social media LinkedIn, Fiverr","title":"Examples"},{"location":"Libraries/","text":"Spotlight DLRM DeepMatch DeepCTR RecBole https://github.com/microsoft/recommenders https://github.com/NicolasHug/Surprise https://github.com/lyst/lightfm https://github.com/benfred/implicit DaisyRec https://github.com/sisinflab/elliot https://github.com/PreferredAI/cornac https://github.com/mlpack/mlpack https://github.com/ylongqi/openrec https://github.com/Ibotta/mr_uplift https://github.com/RUCAIBox/CRSLab https://github.com/alibaba/x-deeplearning https://github.com/cheungdaven/DeepRec https://github.com/Coder-Yu/RecQ https://github.com/ylongqi/openrec Graph based https://github.com/dmlc/dgl/ https://github.com/PaddlePaddle/PGL https://github.com/THUDM/cogdl https://github.com/shenweichen/GraphEmbedding Conversational https://github.com/facebookresearch/ParlAI Causal https://github.com/xuanyin/causal-mediation-analysis-for-ab-tests https://github.com/microsoft/dowhy","title":"Libraries"},{"location":"Libraries/#graph-based","text":"https://github.com/dmlc/dgl/ https://github.com/PaddlePaddle/PGL https://github.com/THUDM/cogdl https://github.com/shenweichen/GraphEmbedding","title":"Graph based"},{"location":"Libraries/#conversational","text":"https://github.com/facebookresearch/ParlAI","title":"Conversational"},{"location":"Libraries/#causal","text":"https://github.com/xuanyin/causal-mediation-analysis-for-ab-tests https://github.com/microsoft/dowhy","title":"Causal"},{"location":"Models/","text":"Model Conference Year Paper popularity - - - ItemKNN TOIS 2004 Item-based top-N recommendation algorithms BPR UAI 2009 BPR: Bayesian Personalized Ranking from Implicit Feedback NeuMF WWW 2017 Neural Collaborative Filtering ConvNCF IJCAI 2017 Outer Product-based Neural Collaborative Filtering DMF IJCAI 2017 Deep Matrix Factorization Models for Recommender Systems FISM SIGKDD 2013 FISM: Factored Item Similarity Models for Top-N Recommender Systems NAIS TKDE 2018 NAIS: Neural Attentive Item Similarity Model for Recommendation SpectralCF RecSys 2018 Spectral Collaborative Filtering GCMC SIGKDD 2018 Graph Convolutional Matrix Completion NGCF SIGIR 2019 Neural Graph Collaborative Filtering LightGCN SIGIR 2020 LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation DGCF SIGIR 2020 Disentangled Graph Collaborative Filtering MultiVAE WWW 2018 Variational Autoencoders for Collaborative Filtering MultiDAE WWW 2018 Variational Autoencoders for Collaborative Filtering CDAE WSDM 2016 Collaborative denoising auto-encoders for top-n recommender systems MacridVAE NeurIPS 2019 Learning Disentangled Representations for Recommendation LINE WWW 2015 Large-scale Information Network Embedding EASE WWW 2019 Embarrassingly Shallow Autoencoders for Sparse Data RaCT ICLR 2020 RaCT: Towards Amortized Ranking-Critical Training for Collaborative Filtering. RecVAE WSDM 2020 RecVAE: A new variational autoencoder for Top-N recommendations with implicit feedback. NNCF CIKM 2017 A Neural Collaborative Filtering Model with Interaction-based Neighborhood. ENMF TOIS 2020 Efficient Neural Matrix Factorization without Sampling for Recommendation. SLIMElastic ICDM 2011 SLIM: Sparse Linear Methods for Top-N Recommender Systems LR WWW 2007 Predicting Clicks Estimating the Click-Through Rate for New Ads FM ICDM 2010 Factorization Machines NFM SIGIR 2017 Neural Factorization Machines for Sparse Predictive Analytics DeepFM IJCAI 2017 DeepFM A Factorization-Machine based Neural Network for CTR Prediction xDeepFM SIGKDD 2018 xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems AFM IJCAI 2017 Attentional Factorization Machines: Learning the Weight of Feature Interactions via Attention Networks FFM RecSys 2016 Field-aware Factorization Machines for CTR Prediction FwFM WWW 2018 Field-weighted Factorization Machines for Click-Through Rate Prediction in Display Advertising FNN(DNN) ECIR 2016 Deep Learning over Multi-field Categorical Data PNN ICDM 2016 Product-based Neural Networks for User Response Prediction DSSM CIKM 2013 Learning Deep Structured Semantic Models for Web Search using Clickthrough Data Wide&Deep RecSys 2016 Wide & Deep Learning for Recommender Systems DIN SIGKDD 2018 Deep Interest Network for Click-Through Rate Prediction DCN ADKDD 2017 Deep & Cross Network for Ad Click Predictions AutoInt CIKM 2019 AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks XGBoost KDD 2016 XGBoost: A Scalable Tree Boosting System LightGBM NIPS 2017 LightGBM: A Highly Efficient Gradient Boosting Decision Tree FPMC WWW 2010 Factorizing Personalized Markov Chains for Next-Basket Recommendation Improved GRU-Rec DLRS 2016 Improved recurrent neural networks for session-based recommendations NARM CIKM 2017 Neural attentive session-based recommendation STAMP SIGKDD 2018 STAMP: short-term attention/memory priority model for session-based recommendation. Caser WSDM 2018 Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding NextItnet WSDM 2019 A simple convolutional generative network for next item recommendation TransRec RecSys 2017 Translation-based Recommendation SASRec ICDM 2018 Self-Attentive Sequential Recommendation BERT4Rec CIKM 2019 BERT4Rec: Sequential Recommendation with Bidirectional Encoder Representations from Transformer SRGNN AAAI 2019 Session-Based Recommendation with Graph Neural Networks GCSAN IJCAI 2019 Graph contextualized self-attention network for session-based recommendation GRU4RecF(+feature embedding) RecSys 2016 Parallel Recurrent Neural Network Architectures for Feature-rich Session-based Recommendations SASRecF(+feature embedding) IJCAI 2019 Feature-level Deeper Self-Attention Network for Sequential Recommendation FDSA IJCAI 2019 Feature-level Deeper Self-Attention Network for Sequential Recommendation S3Rec CIKM 2020 S^3-Rec: Self-Supervised Learning for Sequential Recommendation with Mutual Information Maximization GRU+KG Embedding - - - KSR SIGIR 2018 Improving Sequential Recommendation with Knowledge-Enhanced Memory Networks TLSAN 2021 TLSAN: Time-aware Long- and Short-term Attention Network for Next-item Recommendation Fossil ICDM 2016 Fusing similarity models with Markov chains for sparse sequential recommendation RepeatNet AAAI 2019 A Repeat Aware Neural Recommendation Machine for Session-based Recommendation SHAN IJCAI 2018 Sequential Recommender System based on Hierarchical Attention Network NPE IJCAI 2018 Neural Personalized Embedding for Collaborative Filtering HRM SIGIR 2015 Learning Hierarchical Representation Model for Next Basket Recommendation HGN SIGKDD 2019 Hierarchical Gating Networks for Sequential Recommendation CKE SIGKDD 2016 Collaborative Knowledge Base Embedding for Recommender Systems CFKG MDPI 2018 Learning Heterogeneous Knowledge Base Embeddings for Explainable Recommendation KTUP WWW 2019 Unifying Knowledge Graph Learning and Recommendation:Towards a Better Understanding of User Preferences KGAT SIGKDD 2019 KGAT Knowledge Graph Attention Network for Recommendation RippleNet CIKM 2018 RippleNet Propagating User Preferences on the Knowledge Graph for Recommender Systems. MKR WWW 2019 Multi-Task Feature Learning for Knowledge Graph Enhanced Recommendation KGCN WWW 2019 Knowledge graph convolution networks for recommender systems KGNN-LS SIGKDD 2019 Knowledge-aware Graph Neural Networks with Label Smoothness Regularization for Recommender Systems List of Models (Google sheet) Rating prediction Paper SlopeOne Lemire and Maclachlan, Slope One Predictors for Online Rating-Based Collaborative Filtering, SDM'05. PMF Salakhutdinov and Mnih, Probabilistic Matrix Factorization, NIPS'08. SoRec Ma et al., SoRec: Social Recommendation Using Probabilistic Matrix Factorization, SIGIR'08. SVD++ Koren, Factorization meets the neighborhood: a multifaceted collaborative filtering model, SIGKDD'08. RSTE Ma et al., Learning to Recommend with Social Trust Ensemble, SIGIR'09. SVD Y. Koren, Collaborative Filtering with Temporal Dynamics, SIGKDD'09. SocialMF Jamali and Ester, A Matrix Factorization Technique with Trust Propagation for Recommendation in Social Networks, RecSys'10. EE Khoshneshin et al., Collaborative Filtering via Euclidean Embedding, RecSys'10. SoReg Ma et al., Recommender systems with social regularization, WSDM'11. LOCABAL Tang, Jiliang, et al. Exploiting local and global social context for recommendation, AAAI'13. SREE Li et al., Social Recommendation Using Euclidean embedding, IJCNN'17. CUNE-MF Zhang et al., Collaborative User Network Embedding for Social Recommender Systems, SDM'17. Item Ranking Paper BPR Rendle et al., BPR: Bayesian Personalized Ranking from Implicit Feedback, UAI'09. WRMF Yifan Hu et al.Collaborative Filtering for Implicit Feedback Datasets, KDD'09. SBPR Zhao et al., Leveraing Social Connections to Improve Personalized Ranking for Collaborative Filtering, CIKM'14 ExpoMF Liang et al., Modeling User Exposure in Recommendation, WWW''16. CoFactor Liang et al., Factorization Meets the Item Embedding: Regularizing Matrix Factorization with Item Co-occurrence, RecSys'16. TBPR Wang et al. Social Recommendation with Strong and Weak Ties, CIKM'16'. CDAE Wu et al., Collaborative Denoising Auto-Encoders for Top-N Recommender Systems, WSDM'16'. DMF Xue et al., Deep Matrix Factorization Models for Recommender Systems, IJCAI'17'. NeuMF He et al. Neural Collaborative Filtering, WWW'17. CUNE-BPR Zhang et al., Collaborative User Network Embedding for Social Recommender Systems, SDM'17'. IRGAN Wang et al., IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models, SIGIR'17'. SERec Wang et al., Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation, AAAI'18'. APR He et al., Adversarial Personalized Ranking for Recommendation, SIGIR'18'. IF-BPR Yu et al. Adaptive Implicit Friends Identification over Heterogeneous Network for Social Recommendation, CIKM'18'. CFGAN Chae et al. CFGAN: A Generic Collaborative Filtering Framework based on Generative Adversarial Networks, CIKM'18. NGCF Wang et al. Neural Graph Collaborative Filtering, SIGIR'19'. DiffNet Wu et al. A Neural Influence Diffusion Model for Social Recommendation, SIGIR'19'. RSGAN Yu et al. Generating Reliable Friends via Adversarial Learning to Improve Social Recommendation, ICDM'19'. LightGCN He et al. LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation, SIGIR'20. DHCF Ji et al. Dual Channel Hypergraph Collaborative Filtering, KDD'20. ESRF Yu et al. Enhancing Social Recommendation with Adversarial Graph Convlutional Networks, TKDE'20. MHCN Yu et al. Self-Supervised Multi-Channel Hypergraph Convolutional Network for Social Recommendation, WWW'21.","title":"Models"},{"location":"Notebooks/","text":"Notebook name Colab button nbviewer 00 Overview 01 Train Recommendations AdHoc 01 Validating And Importing User Item Interaction Data 02 Creating And Evaluating Solutions 02 Recommenders Retrieval AdHoc 02 Train Recommendations ScriptMode 03 Deploying Campaigns And Interacting 03 Optimize Recommendations 03 Recommenders Ranking AdHoc 04 Clean Up Resources 04 Deploy Recommendations REST Endpoint 04 Featurization 04 Prepare Dataset Recommend 05 Context Features 05 Train Model Recommend 05 Train Multitask Recommendations AdHoc 06 Deep Recommenders 06 Predict Model Recommend 06 Train Multitask Recommendations ScriptMode 07 Multitask 07 Optimize Multitask Recommendations 08 Deploy Multitask Recommendations REST Endpoint 09 Recommendation Overview 09 Train Spark Recommendations ScriptMode 10 Recommendation Prepare User Item Dataset 11 Recommendation Matrix Factorization 12 Recommendation Matrix Factorization Explanation 13 Recommendation Train Model 14 Recommendation Prepare Item Metadata Dataset 15 Recommendation Deploy 16 Recommendation Predict 17 Recommendation Clean Up 2021 04 20 Dl Retrieval 2021 04 21 Rec Algo Ncf Pytorch Pyy0715 2021 04 22 Vowpal Wabbit Contextual Recommender 2021 04 23 Similar Product Recommender 2021 04 24 Recommendation Node2vec 2021 04 24 Rec Medium Word2vec 2021 04 25 Recommender Implicit Negative Feedback 2021 04 26 Sequence Aware Recommenders Music 2021 04 27 Image Similarity Recommendations 99 01 Validating And Importing User Item Interaction Data 99 02 Validating And Importing Item Metadata 99 03 Creating And Evaluating Solutions 99 04 Deploying Campaigns And Filters 99 05 Interacting With Campaigns And Filters 99 06 Clean Up Resources Validating And Importing Item Metadata Als Bqml Als Bqml Hybrid Amazon Amazon Graph Mf Nlp Amazonmusic Amazonmusic2 Amazonmusic Caserec Bookcrossing Booking Challenge WSDM2021 Cfmodel Softmax Model Solution Composertriggered Content Based By Hand Content Based Preproc Content Based Using Neural Networks Coursetalk Nonpersonalized Douban Social Endtoend Goodreads Lightfm Groceries Grocery Recommendations Hackernews Handson Deep Learning Retrieval Hybrid Recommendations Hybrid Recommendations Preproc Kafka Pyspark Matrix Factorization Mentor Recommender Ml 100k2 Ml 100k Movie Poster Detection Movie Recommender Movie Recommender Collaborative Movielens 100k Movielens 100k Cornac Movielens 1m Wordcloud Movielens Explicit Movielens Fm Aws Sagemaker Movielens Fm Knn Sagemaker Movielens Hetrec Contextual Libfm Movielens Implicit Movielens Latest Movielens Latest Als Movielens Pytorch Movielens Pytorch Matrixfactorization Movielens Sagemaker Movielens Surprise Nlp Movielens Tensorflow Movielens Tensorflow Official Music Recommender Pyspark Netflix Netflix2 Preferredai 01 Introduction Preferredai 02 Neighborhood Preferredai 03 Matrix Factorization Preferredai 04 Implicit Feedback Preferredai 05 Multimodality Preferredai 06 Contextual Awareness Preferredai 07 Explanations Preferredai 08 Retrieval Preferredai 09 Deep Learning Product Review Collaborative Rec Tut Contentbased Imgsim Shirts Rec Tut Rees46 Nvidia Rec Algo Ncf Mxnet D2ai Rec Algo Ncf Pytorch Pyy0715 Rec Algo Ncf Pytorch Yihongchen Rec Algo Ncf Tensorflow1 X Fdb78 Rec Concept Retrieval Preferredai Rec Tool Elliot Basics Recsys Streamlit App Retailrocket SongMSD Triplet Keras Trivago 001 Itempop Trivago 002 Benchmark Turicreate Twitter Nvtabular Visual Content Based Sagemaker Wals Wals Tft Yelp Yoochoose Yoochoose2 Yoochoose Eda Yoochoose Eda 2 Yoochoose Matrixnet Yoochoose Pytorch Geometric","title":"Notebooks"},{"location":"Papers/","text":"Survey Measuring the Business Value of Recommender Systems. arxiv'19. ( paper ) A Survey on Session-based Recommender Systems. arxiv'19. ( paper ) Deep Learning-based Sequential Recommender Systems: Concepts, Algorithms, and Evaluations. arxiv'19. ( paper ) A review on deep learning for recommender systems: challenges and remedies. AI Review'18. ( paper ) Explainable Recommendation: A Survey and New Perspectives. arxiv'18. ( paper ) Evaluation of Session-based Recommendation Algorithms. arxiv'18. ( paper ) Deep learning based recommender system: A survey and new perspectives. CSUR'18. ( paper ) Sequence-Aware Recommender Systems. arxiv'18. ( paper ) A survey of point-of-interest recommendation in location-based social networks. arxiv'16. ( paper ) Social Recommendation: A Review. SNAM'13. ( paper ) Recommender systems survey. 2013. ( paper ) General Methods Markov Random Field for Collaborative Filtering. NeurIPS'19. ( paper ) Are We Really Making Much Progress? A Worrying Analysis of Recent Neural Recommendation Approaches. RecSys'19. ( paper )( code ) Infer Implicit Contexts in Real-time Online-to-Offline Recommendation. KDD'19. ( paper ) A Capsule Network for Recommendation and Explaining What You Like and Dislike. SIGIR'19. ( paper )( code ) Compositional Coding for Collaborative Filtering. SIGIR'19. ( paper )( code ) Joint Optimization of Tree-based Index and Deep Model for Recommender Systems. arxiv'19. ( paper ) Gated Attentive-Autoencoder for Content-Aware Recommendation. WSDM'19. ( paper ) Real-time Personalization using Embeddings for Search Ranking at Airbnb. KDD'18. ( paper ) Graph Convolutional Neural Networks for Web-Scale Recommender Systems. KDD'18. ( paper ) Local Latent Space Models for Top-N Recommendation. KDD'18. ( paper ) Learning from History and Present: Next-item Recommendation via Discriminatively Exploiting User Behaviors. KDD'18. ( paper ) Variational Autoencoders for Collaborative Filtering. WWW'18. ( paper ) Learning Tree-based Deep Model for Recommender Systems. arxiv'18. ( paper ) Collaborative Memory Network for Recommendation Systems. SIGIR'18. ( paper ) Regularizing Matrix Factorization with User and Item Embeddings for Recommendation. CIKM'18. ( paper ) Neural collaborative filtering. WWW'17. ( paper )( code ) CCCFNet: a content-boosted collaborative filtering neural network for cross domain recommender systems. WWW'17. ( paper ) Collaborative metric learning. WWW'17. ( paper ) Collaborative denoising auto-encoders for top-n recommender systems. WSDM'16. ( paper ) Fast matrix factorization for online recommendation with implicit feedback. SIGIR'16. ( paper ) A neural autoregressive approach to collaborative filtering. ICML'16. ( paper ) Deep neural networks for youtube recommendations. RecSys'16. ( paper ) Autorec: Autoencoders meet collaborative filtering. WWW'15. ( paper ) Collaborative deep learning for recommender systems. KDD'15. ( paper ) Probabilistic matrix factorization with non-random missing data. ICML'14. ( paper ) FISM: Factored Item Similarity Models for Top-N Recommender Systems. KDD'13. ( paper ) BPR: Bayesian personalized ranking from implicit feedback. UAI'09. ( paper ) Matrix factorization techniques for recommender systems. Computer'09. ( paper ) Probabilistic matrix factorization. NIPS'08. ( paper ) Restricted Boltzmann machines for collaborative filtering. ICML'07. ( paper ) Amazon.com recommendations: Item-to-item collaborative filtering. IEEE INTERNET COMPUT'03. ( paper ) Item-based collaborative filtering recommendation algorithms. WWW'01. ( paper ) Social Recommendation A Modular Adversarial Approach to Social Recommendation. CIKM'2019. ( paper )( code ) Deep Adversarial Social Recommendation. IJCAI'19. ( paper ) Beyond Personalization: Social Content Recommendation for Creator Equality and Consumer Satisfaction. KDD'19. ( paper )( code ) A Neural Influence Diffusion Model for Social Recommendation. SIGIR'19. ( paper )( code ) An Efficient Adaptive Transfer Neural Network for Social-aware Recommendation. ( paper ) Dual Graph Attention Networks for Deep Latent Representation of Multifaceted Social Effects in Recommender Systems. WWW'19. ( paper ) Session-based Social Recommendation via Dynamic Graph Attention Networks. WSDM'19. ( paper )( code ) Social Attentional Memory Network: Modeling Aspect- and Friend-level Diferences in Recommendation. WSDM'19. ( paper ) Graph Neural Networks for Social Recommendation. WWW'19. ( paper ) Attentive Recurrent Social Recommendation. SIGIR'19. ( paper ) Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation. AAAI'18. ( paper ) SocialGCN: An Efficient Graph Convolutional Network based Model for Social Recommendation. AAAI'18. ( paper ) Learning and Transferring Social and Item Visibilities for Personalized Recommendation. CIKM'17. ( paper ) Learning to Rank with Trust and Distrust in Recommender Systems. Recsys'17. ( paper ) Collaborative User Network Embedding for Social Recommender Systems. SDM'17. ( paper ) Social recommendation with strong and weak ties. CIKM'16. ( paper ) Context-aware collaborative topic regression with social matrix factorization for recommender systems. AAAI'14. ( paper ) Leveraging social connections to improve personalized ranking for collaborative filtering. CIKM'14. ( paper ) Social collaborative filtering for cold-start recommendations. RecSys'14. ( paper ) Social collaborative filtering by trust. IJCAI'13. ( paper ) Recommender systems with social regularization. WSDM'11. ( paper ) A matrix factorization technique with trust propagation for recommendation in social networks. RecSys'10. ( paper ) Trustwalker: a random walk model for combining trust-based and item-based recommendation. KDD'09. ( paper ) Learning to recommend with social trust ensemble. SIGIR'09. ( paper ) Learning to recommend with trust and distrust relationships. RecSys'09. ( paper ) Sorec: social recommendation using probabilistic matrix factorization. CIKM'08. ( paper ) Sequential Recommendation A Dynamic Co-attention Network for Session-based Recommendation. CIKM'2019. ( paper ) BERT4Rec: Sequential Recommendation with Bidirectional Encoder Representations from Transformer. CIKM'2019. ( paper )( code ) Hierarchical Gating Networks for Sequential Recommendation. KDD2019. ( paper )( code ) Hierarchical Context enabled Recurrent Neural Network for Recommendation. AAAI2019. ( paper )( code ) Lifelong Sequential Modeling with Personalized Memorization for User Response Prediction. SIGIR'19. ( paper )( code ) Hierarchical Temporal Convolutional Networks for Dynamic Recommender Systems. WWW'19. ( paper ) A Simple Convolutional Generative Network for Next Item Recommendation. WSDM'19. ( paper )( code ) Sequential Variational Autoencoders for Collaborative Filtering. WSDM'19. ( paper ) Session-based Recommendation with Graph Neural Networks. AAAI'19. ( paper )( code ) Self-Attentive Sequential Recommendation. ICDM'18. ( paper )( code ) Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding. WSDM'18. ( paper )( code ) Latent Cross: Making Use of Context in Recurrent Recommender Systems. WSDM'18. ( paper ) Sequential Recommendation with User Memory Networks. WSDM'18. ( paper ) STAMP: Short-Term A ention/Memory Priority Model for Session-based Recommendation. KDD'18. ( paper )( code ) Recurrent Neural Networks with Top-k Gains for Session-based Recommendations. CIKM'18. ( paper ) Translation-based recommendation. RecSys'17. ( paper )( code ) Neural Attentive Session-based Recommendation. CIKM'17. ( paper ) Neural Survival Recommender. WSDM'17. ( paper ) Recurrent recommender networks. WSDM'17. ( paper ) Improved Recurrent Neural Networks for Session-based Recommendations. arxiv'16. ( paper ) Session-based Recommendations with Recurrent Neural Networks. ICLR'16. ( paper )( code-Theano , code-TensorFlow ) Fusing similarity models with markov chains for sparse sequential recommendation. ICDM'16. ( paper ) Dynamic Poisson Factorization. RecSys'15. ( paper ) Factorizing personalized markov chains for next-basket recommendation. WWW'10. ( paper ) Temporal collaborative filtering with bayesian probabilistic tensor factorization. SIAM'10. ( paper ) Collaborative Filtering with Temporal Dynamics. KDD'09. ( paper ) Feature-based Recommendation (CTR Prediction) Recommending What Video to Watch Next: A Multitask Ranking System. RecSys'19. ( paper ) AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks. CIKM'19. ( paper )( code ) Deep Spatio-Temporal Neural Networks for Click-Through Rate Prediction. KDD'19. ( paper ) Feature Generation by Convolutional Neural Network for Click-Through Rate Prediction. WWW'19. ( paper ) Interaction-aware Factorization Machines for Recommender Systems. AAAI'19. ( paper ) Deep Session Interest Network for Click-Through Rate Prediction. IJCAI'19. ( paper )( code ) xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems. KDD'18. ( paper )( code ) TEM: Tree-enhanced Embedding Model for Explainable Recommendation. WWW'18. ( paper ) Deepfm: A factorization-machine based neural network for CTR prediction. IJCAI'17. ( paper )( code ) Attentional Factorization Machines: Learning the Weight of Feature Interactions via Attention Networks. IJCAI. ( paper )( code ) Neural Factorization Machines for Sparse Predictive Analytics. SIGIR'17. ( paper )( code ) Deep & Cross Network for Ad Click Predictions. arxiv'17. ( paper ) Product-based neural networks for user response prediction. ICDM'16. ( paper ) Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features. KDD'16. ( paper ) Field-aware factorization machines for CTR prediction. RecSys'16. ( paper ) Deep learning over multi-field categorical data. ECIR'16. ( paper ) Wide & Deep Learning for Recommender Systems. arxiv'16. ( paper ) Knowledge Graph-based Recommendation Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning. arXiv'19. ( paper ) Reinforcement Knowledge Graph Reasoning for Explainable Recommendation. SIGIR'19. ( paper ) Exploring High-Order User Preference on the Knowledge Graph for Recommender Systems. TOIS'19. ( paper ) Knowledge Graph Convolutional Networks for Recommender Systems with Label Smoothness Regularization. KDD'19. ( paper )( code ) Unifying Knowledge Graph Learning and Recommendation: Towards a Better Understanding of User Preference. WWW'19. ( paper ) Jointly Learning Explainable Rules for Recommendation with Knowledge Graph. WWW'19. ( paper ) Multi-Task Feature Learning for Knowledge Graph Enhanced Recommendation. WWW'19. ( paper ) Explainable Reasoning over Knowledge Graph Paths for Recommendation. AAAI'19. ( paper ) Heterogeneous Information Network Embedding for Recommendation. TKDE'18. ( paper )( code ) Leveraging Meta-path based Context for Top-N Recommendation with A Neural Co-Attention Model. KDD'18. ( paper )( code ) RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems. CIKM'18. ( paper )( code ) DKN: Deep Knowledge-Aware Network for News Recommendation. WWW'18. ( paper ) SHINE: Signed Heterogeneous Information Network Embedding for Sentiment Link Prediction. WSDM'18. ( paper ) Learning Heterogeneous Knowledge Base Embeddings for Explainable Recommendation. Arxiv'18. ( paper ) Meta-Graph Based Recommendation Fusion over Heterogeneous Information Networks. KDD'17. ( paper )( code ) Collaborative Knowledge Base Embedding for Recommender Systems. KDD'16. ( paper ) Personalized Recommendations using Knowledge Graphs: A Probabilistic Logic Programming Approach.RecSys'16. ( paper ) Personalized Entity Recommendation: A Heterogeneous Information Network Approach. WSDM'14. ( paper ) PathSim: Meta Path-Based Top-K Similarity Search in Heterogeneous Information Networks.VLDB'11.( paper ) Reinforcement Learning for Recommendation Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning. arXiv'19. ( paper ) Reinforcement Knowledge Graph Reasoning for Explainable Recommendation. SIGIR'19. ( paper ) Reinforcement Learning for Slate-based Recommender Systems: A Tractable Decomposition and Practical Methodology. IJCAI'19. ( paper ) Generative Adversarial User Model for Reinforcement Learning Based Recommendation System. ICML'19. ( paper ) Value-aware Recommendation based on Reinforced Profit Maximization in E-commerce Systems. arxiv'19. ( paper )( code ) Top-K Off-Policy Correction for a REINFORCE Recommender System. WSDM'19. ( paper ) Deep Reinforcement Learning for Page-wise Recommendations. RecSys'18. ( paper ) DRN: A Deep Reinforcement Learning Framework for News Recommendation. KDD'18. ( paper ) Recommendations with Negative Feedback via Pairwise Deep Reinforcement Learning. KDD'18. ( paper ) Supervised Reinforcement Learning with Recurrent Neural Network for Dynamic Treatment Recommendation. KDD'18. ( paper ) Reinforcement Learning to Rank with Markov Decision Process. SIGIR'17. ( paper ) Deep Reinforcement Learning for List-wise Recommendations. arxiv'17. ( paper ) Factored MDPs for Detecting Topics of User Sessions. RecSys'14. ( paper ) Optimal Radio Channel Recommendations with Explicit and Implicit Feedback. RecSys'12. ( paper ) Improving recommender systems with adaptive conversational strategies. HT'09. ( paper ) A hybrid web recommender system based on q-learning. SAC'08. ( paper ) Usage-based web recommendations: a reinforcement learning approach. RecSys'07. ( paper ) An MDP-Based Recommender System. JMLR'05. ( paper ) POI Recommendation Spatiotemporal Representation Learning for Translation-Based POI Recommendation. TOIS'19. ( paper ) Topic-Enhanced Memory Networks for Personalised Point-of-Interest Recommendation. KDD'19. ( paper ) Exploiting POI-Specific Geographical Influence for Point-of-Interest Recommendation. IJCAI'18. ( paper ) Content-Aware Hierarchical Point-of-Interest Embedding Model for Successive POI Recommendation. IJCAI'18. ( paper ) A Contextual Attention Recurrent Architecture for Context-Aware Venue Recommendation. SIGIR'18. ( paper ) A location-sentiment-aware recommender system for both hometown and out-of-town users. KDD'17. ( paper ) What your images reveal: Exploiting visual contents for point-of-interest recommendation. WWW'17. ( paper ) POI2Vec: Geographical Latent Representation for Predicting Future Visitors. AAAI'17. ( paper ) Category-aware next point-of-interest recommendation via listwise Bayesian personalized ranking. IJCAI'17. ( paper ) Predicting the Next Location: A Recurrent Model with Spatial and Temporal Contexts. AAAI'16. ( paper )( code ) Point-of-interest recommendations: Learning potential check-ins from friends. KDD'16. ( paper ) Gmove: Group-level mobility modeling using geo-tagged social media. KDD'16. ( paper ) Learning graph-based poi embedding for location-based recommendation. CIKM'16. ( paper ) Geo-teaser: Geo-temporal sequential embedding rank for point-of-interest recommendation. WWW'16. ( paper ) GeoSoCa: Exploiting geographical, social and categorical correlations for point-of-interest recommendations. SIGIR'15. ( paper ) GeoMF: joint geographical modeling and matrix factorization for point-of-interest recommendation. KDD'14. ( paper ) Exploiting geographical neighborhood characteristics for location recommendation. CIKM'14. ( paper ) Nlpmm: A next location predictor with markov modeling. PAKDD'14. ( paper ) Lore: Exploiting sequential influence for location recommendations. SIGSPATIAL\u201914. ( paper ) Exploring Temporal Effects for Location Recommendation on Location-Based Social Networks. RecSys'13. ( paper ) Where You Like to Go Next: Successive Point-of-Interest Recommendation. AAAI'13. ( paper ) Fused Matrix Factorization with Geographical and Social Influence in Location-Based Social Networks. AAAI'12. ( paper ) Friendship and mobility: user movement in location-based social networks. KDD'11. ( paper ) Cold-Start Recommendation From Zero-Shot Learning to Cold-Start Recommendation. AAAI'2019. ( paper )( code ) MeLU: Meta-Learned User Preference Estimator for Cold-Start Recommendation. KDD'2019. ( paper )( code ) DropoutNet: Addressing Cold Start in Recommender Systems. NeurIPS'2019. ( paper )( code ) Security/Robutness of RecSys Data Poisoning Attacks on Neighborhood-based Recommender Systems. arxiv'19. ( paper ) Adversarial recommendation attack of the learned fake users. arxiv'18. ( paper ) Poisoning Attacks to Graph-Based Recommender Systems. arxiv'18. ( paper ) Adversarial Personalized Ranking for Recommendation. SIGIR'18. ( paper ) Adversarial Collaborative Auto-encoder for Top-N Recommendation. arxiv'18. ( paper ) Fake Co-visitation Injection Attacks to Recommender Systems. NDSS'17. ( paper ) Data Poisoning Attacks on Factorization-Based Collaborative Filtering. NIPS'16. ( paper ) Causal Recommendation Large-scale Causal Approaches to Debiasing Post-click Conversion Rate Estimation with Multi-task Learning. arxiv'2020. ( paper ) The Blessings of Multiple Causes. JASA'19. ( paper ) Observational Data for Heterogeneous Treatment Effects with Application to Recommender Systems. EC'19. ( paper ) The Deconfounded Recommender: A Causal Inference Approach to Recommendation. arxiv'19. ( paper ) Causal Embeddings for Recommendation: An Extended Abstract. IJCAI'2019. ( paper ) Causal Embeddings for Recommendation. RecSys'18. ( paper ) Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation. AAAI'2018. ( paper ) Modeling User Exposure in Recommendation. WWW'16. ( paper ) Causal Inference for Recommendation. UAI Workshop'16. ( paper ) Recommendations as Treatments: Debiasing Learning and Evaluation. ICML'16. ( paper ) Batch Learning from Logged Bandit Feedback through Counterfactual Risk Minimization. JMLR'15. ( paper ) Estimating the Causal Impact of Recommendation Systems from Observational Data. EC'15. ( paper ) Consistence beats causality in recommender systems. arxiv'15. ( paper )","title":"Papers"},{"location":"Papers/#survey","text":"Measuring the Business Value of Recommender Systems. arxiv'19. ( paper ) A Survey on Session-based Recommender Systems. arxiv'19. ( paper ) Deep Learning-based Sequential Recommender Systems: Concepts, Algorithms, and Evaluations. arxiv'19. ( paper ) A review on deep learning for recommender systems: challenges and remedies. AI Review'18. ( paper ) Explainable Recommendation: A Survey and New Perspectives. arxiv'18. ( paper ) Evaluation of Session-based Recommendation Algorithms. arxiv'18. ( paper ) Deep learning based recommender system: A survey and new perspectives. CSUR'18. ( paper ) Sequence-Aware Recommender Systems. arxiv'18. ( paper ) A survey of point-of-interest recommendation in location-based social networks. arxiv'16. ( paper ) Social Recommendation: A Review. SNAM'13. ( paper ) Recommender systems survey. 2013. ( paper )","title":"Survey"},{"location":"Papers/#general-methods","text":"Markov Random Field for Collaborative Filtering. NeurIPS'19. ( paper ) Are We Really Making Much Progress? A Worrying Analysis of Recent Neural Recommendation Approaches. RecSys'19. ( paper )( code ) Infer Implicit Contexts in Real-time Online-to-Offline Recommendation. KDD'19. ( paper ) A Capsule Network for Recommendation and Explaining What You Like and Dislike. SIGIR'19. ( paper )( code ) Compositional Coding for Collaborative Filtering. SIGIR'19. ( paper )( code ) Joint Optimization of Tree-based Index and Deep Model for Recommender Systems. arxiv'19. ( paper ) Gated Attentive-Autoencoder for Content-Aware Recommendation. WSDM'19. ( paper ) Real-time Personalization using Embeddings for Search Ranking at Airbnb. KDD'18. ( paper ) Graph Convolutional Neural Networks for Web-Scale Recommender Systems. KDD'18. ( paper ) Local Latent Space Models for Top-N Recommendation. KDD'18. ( paper ) Learning from History and Present: Next-item Recommendation via Discriminatively Exploiting User Behaviors. KDD'18. ( paper ) Variational Autoencoders for Collaborative Filtering. WWW'18. ( paper ) Learning Tree-based Deep Model for Recommender Systems. arxiv'18. ( paper ) Collaborative Memory Network for Recommendation Systems. SIGIR'18. ( paper ) Regularizing Matrix Factorization with User and Item Embeddings for Recommendation. CIKM'18. ( paper ) Neural collaborative filtering. WWW'17. ( paper )( code ) CCCFNet: a content-boosted collaborative filtering neural network for cross domain recommender systems. WWW'17. ( paper ) Collaborative metric learning. WWW'17. ( paper ) Collaborative denoising auto-encoders for top-n recommender systems. WSDM'16. ( paper ) Fast matrix factorization for online recommendation with implicit feedback. SIGIR'16. ( paper ) A neural autoregressive approach to collaborative filtering. ICML'16. ( paper ) Deep neural networks for youtube recommendations. RecSys'16. ( paper ) Autorec: Autoencoders meet collaborative filtering. WWW'15. ( paper ) Collaborative deep learning for recommender systems. KDD'15. ( paper ) Probabilistic matrix factorization with non-random missing data. ICML'14. ( paper ) FISM: Factored Item Similarity Models for Top-N Recommender Systems. KDD'13. ( paper ) BPR: Bayesian personalized ranking from implicit feedback. UAI'09. ( paper ) Matrix factorization techniques for recommender systems. Computer'09. ( paper ) Probabilistic matrix factorization. NIPS'08. ( paper ) Restricted Boltzmann machines for collaborative filtering. ICML'07. ( paper ) Amazon.com recommendations: Item-to-item collaborative filtering. IEEE INTERNET COMPUT'03. ( paper ) Item-based collaborative filtering recommendation algorithms. WWW'01. ( paper )","title":"General Methods"},{"location":"Papers/#social-recommendation","text":"A Modular Adversarial Approach to Social Recommendation. CIKM'2019. ( paper )( code ) Deep Adversarial Social Recommendation. IJCAI'19. ( paper ) Beyond Personalization: Social Content Recommendation for Creator Equality and Consumer Satisfaction. KDD'19. ( paper )( code ) A Neural Influence Diffusion Model for Social Recommendation. SIGIR'19. ( paper )( code ) An Efficient Adaptive Transfer Neural Network for Social-aware Recommendation. ( paper ) Dual Graph Attention Networks for Deep Latent Representation of Multifaceted Social Effects in Recommender Systems. WWW'19. ( paper ) Session-based Social Recommendation via Dynamic Graph Attention Networks. WSDM'19. ( paper )( code ) Social Attentional Memory Network: Modeling Aspect- and Friend-level Diferences in Recommendation. WSDM'19. ( paper ) Graph Neural Networks for Social Recommendation. WWW'19. ( paper ) Attentive Recurrent Social Recommendation. SIGIR'19. ( paper ) Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation. AAAI'18. ( paper ) SocialGCN: An Efficient Graph Convolutional Network based Model for Social Recommendation. AAAI'18. ( paper ) Learning and Transferring Social and Item Visibilities for Personalized Recommendation. CIKM'17. ( paper ) Learning to Rank with Trust and Distrust in Recommender Systems. Recsys'17. ( paper ) Collaborative User Network Embedding for Social Recommender Systems. SDM'17. ( paper ) Social recommendation with strong and weak ties. CIKM'16. ( paper ) Context-aware collaborative topic regression with social matrix factorization for recommender systems. AAAI'14. ( paper ) Leveraging social connections to improve personalized ranking for collaborative filtering. CIKM'14. ( paper ) Social collaborative filtering for cold-start recommendations. RecSys'14. ( paper ) Social collaborative filtering by trust. IJCAI'13. ( paper ) Recommender systems with social regularization. WSDM'11. ( paper ) A matrix factorization technique with trust propagation for recommendation in social networks. RecSys'10. ( paper ) Trustwalker: a random walk model for combining trust-based and item-based recommendation. KDD'09. ( paper ) Learning to recommend with social trust ensemble. SIGIR'09. ( paper ) Learning to recommend with trust and distrust relationships. RecSys'09. ( paper ) Sorec: social recommendation using probabilistic matrix factorization. CIKM'08. ( paper )","title":"Social Recommendation"},{"location":"Papers/#sequential-recommendation","text":"A Dynamic Co-attention Network for Session-based Recommendation. CIKM'2019. ( paper ) BERT4Rec: Sequential Recommendation with Bidirectional Encoder Representations from Transformer. CIKM'2019. ( paper )( code ) Hierarchical Gating Networks for Sequential Recommendation. KDD2019. ( paper )( code ) Hierarchical Context enabled Recurrent Neural Network for Recommendation. AAAI2019. ( paper )( code ) Lifelong Sequential Modeling with Personalized Memorization for User Response Prediction. SIGIR'19. ( paper )( code ) Hierarchical Temporal Convolutional Networks for Dynamic Recommender Systems. WWW'19. ( paper ) A Simple Convolutional Generative Network for Next Item Recommendation. WSDM'19. ( paper )( code ) Sequential Variational Autoencoders for Collaborative Filtering. WSDM'19. ( paper ) Session-based Recommendation with Graph Neural Networks. AAAI'19. ( paper )( code ) Self-Attentive Sequential Recommendation. ICDM'18. ( paper )( code ) Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding. WSDM'18. ( paper )( code ) Latent Cross: Making Use of Context in Recurrent Recommender Systems. WSDM'18. ( paper ) Sequential Recommendation with User Memory Networks. WSDM'18. ( paper ) STAMP: Short-Term A ention/Memory Priority Model for Session-based Recommendation. KDD'18. ( paper )( code ) Recurrent Neural Networks with Top-k Gains for Session-based Recommendations. CIKM'18. ( paper ) Translation-based recommendation. RecSys'17. ( paper )( code ) Neural Attentive Session-based Recommendation. CIKM'17. ( paper ) Neural Survival Recommender. WSDM'17. ( paper ) Recurrent recommender networks. WSDM'17. ( paper ) Improved Recurrent Neural Networks for Session-based Recommendations. arxiv'16. ( paper ) Session-based Recommendations with Recurrent Neural Networks. ICLR'16. ( paper )( code-Theano , code-TensorFlow ) Fusing similarity models with markov chains for sparse sequential recommendation. ICDM'16. ( paper ) Dynamic Poisson Factorization. RecSys'15. ( paper ) Factorizing personalized markov chains for next-basket recommendation. WWW'10. ( paper ) Temporal collaborative filtering with bayesian probabilistic tensor factorization. SIAM'10. ( paper ) Collaborative Filtering with Temporal Dynamics. KDD'09. ( paper )","title":"Sequential Recommendation"},{"location":"Papers/#feature-based-recommendation-ctr-prediction","text":"Recommending What Video to Watch Next: A Multitask Ranking System. RecSys'19. ( paper ) AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks. CIKM'19. ( paper )( code ) Deep Spatio-Temporal Neural Networks for Click-Through Rate Prediction. KDD'19. ( paper ) Feature Generation by Convolutional Neural Network for Click-Through Rate Prediction. WWW'19. ( paper ) Interaction-aware Factorization Machines for Recommender Systems. AAAI'19. ( paper ) Deep Session Interest Network for Click-Through Rate Prediction. IJCAI'19. ( paper )( code ) xDeepFM: Combining Explicit and Implicit Feature Interactions for Recommender Systems. KDD'18. ( paper )( code ) TEM: Tree-enhanced Embedding Model for Explainable Recommendation. WWW'18. ( paper ) Deepfm: A factorization-machine based neural network for CTR prediction. IJCAI'17. ( paper )( code ) Attentional Factorization Machines: Learning the Weight of Feature Interactions via Attention Networks. IJCAI. ( paper )( code ) Neural Factorization Machines for Sparse Predictive Analytics. SIGIR'17. ( paper )( code ) Deep & Cross Network for Ad Click Predictions. arxiv'17. ( paper ) Product-based neural networks for user response prediction. ICDM'16. ( paper ) Deep Crossing: Web-Scale Modeling without Manually Crafted Combinatorial Features. KDD'16. ( paper ) Field-aware factorization machines for CTR prediction. RecSys'16. ( paper ) Deep learning over multi-field categorical data. ECIR'16. ( paper ) Wide & Deep Learning for Recommender Systems. arxiv'16. ( paper )","title":"Feature-based Recommendation (CTR Prediction)"},{"location":"Papers/#knowledge-graph-based-recommendation","text":"Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning. arXiv'19. ( paper ) Reinforcement Knowledge Graph Reasoning for Explainable Recommendation. SIGIR'19. ( paper ) Exploring High-Order User Preference on the Knowledge Graph for Recommender Systems. TOIS'19. ( paper ) Knowledge Graph Convolutional Networks for Recommender Systems with Label Smoothness Regularization. KDD'19. ( paper )( code ) Unifying Knowledge Graph Learning and Recommendation: Towards a Better Understanding of User Preference. WWW'19. ( paper ) Jointly Learning Explainable Rules for Recommendation with Knowledge Graph. WWW'19. ( paper ) Multi-Task Feature Learning for Knowledge Graph Enhanced Recommendation. WWW'19. ( paper ) Explainable Reasoning over Knowledge Graph Paths for Recommendation. AAAI'19. ( paper ) Heterogeneous Information Network Embedding for Recommendation. TKDE'18. ( paper )( code ) Leveraging Meta-path based Context for Top-N Recommendation with A Neural Co-Attention Model. KDD'18. ( paper )( code ) RippleNet: Propagating User Preferences on the Knowledge Graph for Recommender Systems. CIKM'18. ( paper )( code ) DKN: Deep Knowledge-Aware Network for News Recommendation. WWW'18. ( paper ) SHINE: Signed Heterogeneous Information Network Embedding for Sentiment Link Prediction. WSDM'18. ( paper ) Learning Heterogeneous Knowledge Base Embeddings for Explainable Recommendation. Arxiv'18. ( paper ) Meta-Graph Based Recommendation Fusion over Heterogeneous Information Networks. KDD'17. ( paper )( code ) Collaborative Knowledge Base Embedding for Recommender Systems. KDD'16. ( paper ) Personalized Recommendations using Knowledge Graphs: A Probabilistic Logic Programming Approach.RecSys'16. ( paper ) Personalized Entity Recommendation: A Heterogeneous Information Network Approach. WSDM'14. ( paper ) PathSim: Meta Path-Based Top-K Similarity Search in Heterogeneous Information Networks.VLDB'11.( paper )","title":"Knowledge Graph-based Recommendation"},{"location":"Papers/#reinforcement-learning-for-recommendation","text":"Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning. arXiv'19. ( paper ) Reinforcement Knowledge Graph Reasoning for Explainable Recommendation. SIGIR'19. ( paper ) Reinforcement Learning for Slate-based Recommender Systems: A Tractable Decomposition and Practical Methodology. IJCAI'19. ( paper ) Generative Adversarial User Model for Reinforcement Learning Based Recommendation System. ICML'19. ( paper ) Value-aware Recommendation based on Reinforced Profit Maximization in E-commerce Systems. arxiv'19. ( paper )( code ) Top-K Off-Policy Correction for a REINFORCE Recommender System. WSDM'19. ( paper ) Deep Reinforcement Learning for Page-wise Recommendations. RecSys'18. ( paper ) DRN: A Deep Reinforcement Learning Framework for News Recommendation. KDD'18. ( paper ) Recommendations with Negative Feedback via Pairwise Deep Reinforcement Learning. KDD'18. ( paper ) Supervised Reinforcement Learning with Recurrent Neural Network for Dynamic Treatment Recommendation. KDD'18. ( paper ) Reinforcement Learning to Rank with Markov Decision Process. SIGIR'17. ( paper ) Deep Reinforcement Learning for List-wise Recommendations. arxiv'17. ( paper ) Factored MDPs for Detecting Topics of User Sessions. RecSys'14. ( paper ) Optimal Radio Channel Recommendations with Explicit and Implicit Feedback. RecSys'12. ( paper ) Improving recommender systems with adaptive conversational strategies. HT'09. ( paper ) A hybrid web recommender system based on q-learning. SAC'08. ( paper ) Usage-based web recommendations: a reinforcement learning approach. RecSys'07. ( paper ) An MDP-Based Recommender System. JMLR'05. ( paper )","title":"Reinforcement Learning for Recommendation"},{"location":"Papers/#poi-recommendation","text":"Spatiotemporal Representation Learning for Translation-Based POI Recommendation. TOIS'19. ( paper ) Topic-Enhanced Memory Networks for Personalised Point-of-Interest Recommendation. KDD'19. ( paper ) Exploiting POI-Specific Geographical Influence for Point-of-Interest Recommendation. IJCAI'18. ( paper ) Content-Aware Hierarchical Point-of-Interest Embedding Model for Successive POI Recommendation. IJCAI'18. ( paper ) A Contextual Attention Recurrent Architecture for Context-Aware Venue Recommendation. SIGIR'18. ( paper ) A location-sentiment-aware recommender system for both hometown and out-of-town users. KDD'17. ( paper ) What your images reveal: Exploiting visual contents for point-of-interest recommendation. WWW'17. ( paper ) POI2Vec: Geographical Latent Representation for Predicting Future Visitors. AAAI'17. ( paper ) Category-aware next point-of-interest recommendation via listwise Bayesian personalized ranking. IJCAI'17. ( paper ) Predicting the Next Location: A Recurrent Model with Spatial and Temporal Contexts. AAAI'16. ( paper )( code ) Point-of-interest recommendations: Learning potential check-ins from friends. KDD'16. ( paper ) Gmove: Group-level mobility modeling using geo-tagged social media. KDD'16. ( paper ) Learning graph-based poi embedding for location-based recommendation. CIKM'16. ( paper ) Geo-teaser: Geo-temporal sequential embedding rank for point-of-interest recommendation. WWW'16. ( paper ) GeoSoCa: Exploiting geographical, social and categorical correlations for point-of-interest recommendations. SIGIR'15. ( paper ) GeoMF: joint geographical modeling and matrix factorization for point-of-interest recommendation. KDD'14. ( paper ) Exploiting geographical neighborhood characteristics for location recommendation. CIKM'14. ( paper ) Nlpmm: A next location predictor with markov modeling. PAKDD'14. ( paper ) Lore: Exploiting sequential influence for location recommendations. SIGSPATIAL\u201914. ( paper ) Exploring Temporal Effects for Location Recommendation on Location-Based Social Networks. RecSys'13. ( paper ) Where You Like to Go Next: Successive Point-of-Interest Recommendation. AAAI'13. ( paper ) Fused Matrix Factorization with Geographical and Social Influence in Location-Based Social Networks. AAAI'12. ( paper ) Friendship and mobility: user movement in location-based social networks. KDD'11. ( paper )","title":"POI Recommendation"},{"location":"Papers/#cold-start-recommendation","text":"From Zero-Shot Learning to Cold-Start Recommendation. AAAI'2019. ( paper )( code ) MeLU: Meta-Learned User Preference Estimator for Cold-Start Recommendation. KDD'2019. ( paper )( code ) DropoutNet: Addressing Cold Start in Recommender Systems. NeurIPS'2019. ( paper )( code )","title":"Cold-Start Recommendation"},{"location":"Papers/#securityrobutness-of-recsys","text":"Data Poisoning Attacks on Neighborhood-based Recommender Systems. arxiv'19. ( paper ) Adversarial recommendation attack of the learned fake users. arxiv'18. ( paper ) Poisoning Attacks to Graph-Based Recommender Systems. arxiv'18. ( paper ) Adversarial Personalized Ranking for Recommendation. SIGIR'18. ( paper ) Adversarial Collaborative Auto-encoder for Top-N Recommendation. arxiv'18. ( paper ) Fake Co-visitation Injection Attacks to Recommender Systems. NDSS'17. ( paper ) Data Poisoning Attacks on Factorization-Based Collaborative Filtering. NIPS'16. ( paper )","title":"Security/Robutness of RecSys"},{"location":"Papers/#causal-recommendation","text":"Large-scale Causal Approaches to Debiasing Post-click Conversion Rate Estimation with Multi-task Learning. arxiv'2020. ( paper ) The Blessings of Multiple Causes. JASA'19. ( paper ) Observational Data for Heterogeneous Treatment Effects with Application to Recommender Systems. EC'19. ( paper ) The Deconfounded Recommender: A Causal Inference Approach to Recommendation. arxiv'19. ( paper ) Causal Embeddings for Recommendation: An Extended Abstract. IJCAI'2019. ( paper ) Causal Embeddings for Recommendation. RecSys'18. ( paper ) Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation. AAAI'2018. ( paper ) Modeling User Exposure in Recommendation. WWW'16. ( paper ) Causal Inference for Recommendation. UAI Workshop'16. ( paper ) Recommendations as Treatments: Debiasing Learning and Evaluation. ICML'16. ( paper ) Batch Learning from Logged Bandit Feedback through Counterfactual Risk Minimization. JMLR'15. ( paper ) Estimating the Causal Impact of Recommendation Systems from Observational Data. EC'15. ( paper ) Consistence beats causality in recommender systems. arxiv'15. ( paper )","title":"Causal Recommendation"},{"location":"Projects/","text":"Douban Movie Recommendation System Yelp Restaurant Recommendation System Text Recommendation System MovieGEEK Mobile.de Vehicle Recommendation MIND News Recommendation System Power Utility Recommendation System MovieLens Recommendation System RetailRocket Recommendation System Sketchfab Recommendation System Xing Recommendation System Image Similarity System Levi's Clothes Recommendation Process Board BookCrossing Recommendation System REES46 Recommendation System Netflix LinkedIn Recommendation System Quora Recommendation System MarketCloud Recommendations Unfiltered Media Group Slickdeals Product Recommendations Showmax Video Recommendations Kunzmann Automotive E-Commerce Recommendations Itison Product Recommendations Economia News Recommendations Segundamano Ads Recommendations DesignGroup Product Recommendations Catch E-commerce Retail Recommendation System How NYTimes Recommender System Works? Ibotta Spotify Music Streaming Song Recommendation Video Recommendation Internet Marketplace Twitter 1mg Pharmacy Antuit.ai Rent the Runway Covid19 Git Recommender YooChoose Diginetica Kickstarter Trivago Bookking.com Travel Recommendation Avazu Alibaba Facebook Bofrost How YouTube Recommender System Works? How Instagram\u2019s Explore Recommender System Works? How Tmall Homepage Recommender System Works? Santander Product Recommendation Challenge How TaoBao Recommender System Works? System Board Retail Product Recommendation Grubhub Tencent Square Spotify Reco Front End Web App RecoBandit","title":"Projects"},{"location":"Resources/","text":"Projects RecoFront RecoBandit Recommender Capstone Simple recommender with matrix factorization, graph, and NLP on Amazon dataset Blog Posts RecoChef Tutorials External Awesome Feature engineering for recommender systems using Nvidia Merlin on REES46 dataset [ video ] Microsoft Recommenders Library RapidsAI Tutorials Sequence-aware Recommender Workshop Notebook Format Reco Tutorials Codelab Format Bank Product Recommender Knowledge Sources http://www.arxiv-sanity.com/search?q=recommender http://www.arxiv-sanity.com/search?q=cs.AI+cs.IR RecBole: A unified, comprehensive and efficient recommendation library https://paperswithcode.com/task/recommendation-systems/latest#code https://github.com/YuyangZhangFTD/awesome-RecSys-papers https://github.com/robi56/Deep-Learning-for-Recommendation-Systems https://github.com/guyulongcs/Deep-Reinforcement-Learning-for-Recommender-Systems https://github.com/OnYuKang/Recommendation-systems-paperlist https://awesomeopensource.com/projects/recommender-system https://github.com/parklize/RecSys-Libraries https://github.com/mengfeizhang820/Paperlist-for-Recommender-Systems https://github.com/chihming/competitive-recsys https://github.com/hongleizhang/RSPapers https://www.youtube.com/channel/UC2nEn-yNA1BtdDNWziphPGA/playlists https://github.com/geangohn/recsys-tutorial https://www.youtube.com/watch?v=HG3FDCegKVc&list=PLN7ADELDRRhgecE5dNlvs5ej5UB6ia-dv https://www.slideshare.net/search/slideshow?searchfrom=header&q=recommendation&ud=any&ft=all&lang=**&sort= https://www.nvidia.com/en-us/on-demand/my-profile/ http://libgen.gs/ads.php?md5=c58f7cd68e2edeeb8cb5e1995a3c398a http://libgen.gs/ads.php?md5=05dfd70871c9fc0ce10db824cdfe8349 http://libgen.gs/ads.php?md5=2ae0ea003bfe9e88403b5d9c8c439a41 http://libgen.gs/ads.php?md5=b82a9a9f76e270bc31c60db5c89ee527 http://libgen.gs/ads.php?md5=6b679317eeae68d7ba84557b48d3f9c1 http://libgen.gs/ads.php?md5=4a911aab19a2bec515aeebdef973f60e http://libgen.gs/ads.php?md5=2b6ba4e71995261d646ee5a975e960ab http://libgen.gs/ads.php?md5=8111d3f1b0d16bc829c8b6ed77b85cab http://libgen.gs/ads.php?md5=1a8b19f0bfc4336a213524ac9d858d00 https://learning.oreilly.com/topics/recommender-systems/ https://www2.slideshare.net/SparshAgarwal28/clipboards/recommender-systems https://www.youtube.com/channel/UC2nEn-yNA1BtdDNWziphPGA/videos https://github.com/search?l=Jupyter+Notebook&o=desc&q=recommender&s=updated&type=Repositories https://irsworkshop.github.io/2020/ https://slideslive.com/search?query=recommender https://www.ethanrosenthal.com/tags/recommendation-systems/ https://learning.oreilly.com/library/view/practical-recommender-systems/9781617292705/ https://learning.oreilly.com/videos/real-time-contextual/00000NN47XV7SC0/ https://learning.oreilly.com/videos/how-comcast-successfully/0636920451747/ https://learning.oreilly.com/videos/alg (https://learning.oreilly.com/videos/algorithmic-recommendations-at/00000JCUFMMVK0HS/)","title":"Resources"},{"location":"Resources/#projects","text":"RecoFront RecoBandit Recommender Capstone Simple recommender with matrix factorization, graph, and NLP on Amazon dataset","title":"Projects"},{"location":"Resources/#blog-posts","text":"RecoChef","title":"Blog Posts"},{"location":"Resources/#tutorials","text":"","title":"Tutorials"},{"location":"Resources/#external-awesome","text":"Feature engineering for recommender systems using Nvidia Merlin on REES46 dataset [ video ] Microsoft Recommenders Library RapidsAI Tutorials Sequence-aware Recommender Workshop","title":"External Awesome"},{"location":"Resources/#notebook-format","text":"Reco Tutorials","title":"Notebook Format"},{"location":"Resources/#codelab-format","text":"Bank Product Recommender","title":"Codelab Format"},{"location":"Resources/#knowledge-sources","text":"http://www.arxiv-sanity.com/search?q=recommender http://www.arxiv-sanity.com/search?q=cs.AI+cs.IR RecBole: A unified, comprehensive and efficient recommendation library https://paperswithcode.com/task/recommendation-systems/latest#code https://github.com/YuyangZhangFTD/awesome-RecSys-papers https://github.com/robi56/Deep-Learning-for-Recommendation-Systems https://github.com/guyulongcs/Deep-Reinforcement-Learning-for-Recommender-Systems https://github.com/OnYuKang/Recommendation-systems-paperlist https://awesomeopensource.com/projects/recommender-system https://github.com/parklize/RecSys-Libraries https://github.com/mengfeizhang820/Paperlist-for-Recommender-Systems https://github.com/chihming/competitive-recsys https://github.com/hongleizhang/RSPapers https://www.youtube.com/channel/UC2nEn-yNA1BtdDNWziphPGA/playlists https://github.com/geangohn/recsys-tutorial https://www.youtube.com/watch?v=HG3FDCegKVc&list=PLN7ADELDRRhgecE5dNlvs5ej5UB6ia-dv https://www.slideshare.net/search/slideshow?searchfrom=header&q=recommendation&ud=any&ft=all&lang=**&sort= https://www.nvidia.com/en-us/on-demand/my-profile/ http://libgen.gs/ads.php?md5=c58f7cd68e2edeeb8cb5e1995a3c398a http://libgen.gs/ads.php?md5=05dfd70871c9fc0ce10db824cdfe8349 http://libgen.gs/ads.php?md5=2ae0ea003bfe9e88403b5d9c8c439a41 http://libgen.gs/ads.php?md5=b82a9a9f76e270bc31c60db5c89ee527 http://libgen.gs/ads.php?md5=6b679317eeae68d7ba84557b48d3f9c1 http://libgen.gs/ads.php?md5=4a911aab19a2bec515aeebdef973f60e http://libgen.gs/ads.php?md5=2b6ba4e71995261d646ee5a975e960ab http://libgen.gs/ads.php?md5=8111d3f1b0d16bc829c8b6ed77b85cab http://libgen.gs/ads.php?md5=1a8b19f0bfc4336a213524ac9d858d00 https://learning.oreilly.com/topics/recommender-systems/ https://www2.slideshare.net/SparshAgarwal28/clipboards/recommender-systems https://www.youtube.com/channel/UC2nEn-yNA1BtdDNWziphPGA/videos https://github.com/search?l=Jupyter+Notebook&o=desc&q=recommender&s=updated&type=Repositories https://irsworkshop.github.io/2020/ https://slideslive.com/search?query=recommender https://www.ethanrosenthal.com/tags/recommendation-systems/ https://learning.oreilly.com/library/view/practical-recommender-systems/9781617292705/ https://learning.oreilly.com/videos/real-time-contextual/00000NN47XV7SC0/ https://learning.oreilly.com/videos/how-comcast-successfully/0636920451747/ https://learning.oreilly.com/videos/alg (https://learning.oreilly.com/videos/algorithmic-recommendations-at/00000JCUFMMVK0HS/)","title":"Knowledge Sources"},{"location":"Use-Cases/","text":"Most common Popular Products - This is a basic but powerful recommendation logic that works splendidly in nearly all ecommerce stores. The popularity of a product is determined by the number of times it has been purchased (weighted with how long it\u2019s been available). However, more sophisticated recommender systems incorporate other event data into their logics in order to serve even more accurate recommendations (e.g., clicks, views, add-to-cart events, and so on). Getting this right is extremely important, given that the Pareto\u2019s rule in marketing says 80% of product sales come from 20% of products. In the case of content sites (i.e. news sites and video portals), other factors such as time spent on page, percentage scrolled, or seconds watched (of a video) can also be important popularity factors. Personalized recommendations - Personalized recommender widgets display different products to each user based on their past purchase and browsing history. Recommendation algorithms used for this task can differ greatly in terms of how they\u2019re implemented and the factors they consider (and often times, \u201cthe devil is in the details,\u201d as they say). Nevertheless, as popular product recommendations are good for catering for the mainstream, one of the main benefits of personalization in product recommendations is that they can increase the sales of \u201clong tail\u201d items. However, personalized recommendations require considerable amounts of behavioral data on users, which a system does not have in the case of new visitors. This is called the cold start problem for recommender systems. Personalized collaborative filtering recommendations logic is the most common way of personalized recommendations. It\u2019s focusing on the average similarity of products, to the last X number of products a user has viewed. The system uses the same item-to-item collaborative similarity for this task, but it doesn\u2019t compare one item to another, but to all items in the user\u2019s history. Weighing the output based on the recency of interactions usually improves accuracy further. Similar products - Similar product boxes can be based on very different logics. The least complex one is simple category-based filtering, which can be implemented even without a recommendation engine (needless to say, it lags behind in performance as well). If you combine this simple filtering method with meta-data based similarity (descriptions, product titles, tags, prices, etc.), you can greatly enhance the performance, such as by recommending items of the same brand or same color from the current category). For this, you will need to have advanced recommender functionality available on your site. One of the best-performing similarity based logics is a method called \u201citem-to-item collaborative filtering,\u201d a method pioneered by Amazon. I\u2019ll elaborate on this below. \u201cCustomer who bought/viewed this also bought/viewer\u201d collaborative filtering - Collaborative filtering in ecommerce product recommendations was first implemented at scale by Amazon\u2014they filed their initial patent for item-to-item collaborative filtering as early as 1999. I believe their results speak for themselves. At its core, collaborative filtering works by collecting preferences or taste information from many users (collaborating). Collaborative filtering can fuel item-to-item (product similarity based) and personalized recommendations as well. Item-to-item collaborative filtering recommendation logic basically determines the similarity of two products by looking at how often they\u2019re present together in the browsing or purchase histories of users. In practice, widgets using this kind of logics are named \u201cCustomers who viewed this also viewed\u2026\u201d which pretty much explains the basic idea. The preference models these algorithms build are very authentic and specific to your website and your users\u2014they quantify the real interactions between your visitors and platform. Moreover, with ample amount of data, even problems such as automated accessory recommendations can be answered with a reasonable accuracy. (More on this below, in the cart page accessory recommendation section.) Recommending accessories - Recommending accessories for products can significantly increase average order size and value on your site. Moreover, implementing such widgets can be quite easy from a technical point of view. However, depending on the size of your catalog and your category structure, it can be relatively admin-heavy, as it is hard to automate the process of recommending compatible accessories for each item. Therefore, such logics are usually fueled by manually assigned item relations. Ideally, you can recommend categories to categories directly (i.e. iPhone -> iPhone Accessories). This is a lot easier to automate and scale, but requires extremely conscious category structure planning. Of course, with enough data and a bit of creativity, one can abstract rules on how to analyze behavioral information, so that the output of the system will be actual, compatible accessories. One of such easily codifiable rules that can define an accessory in relation to a product is items that are often bought together with it, but cost significantly (two times, three times, or more) less. This is a method we utilize at some of our enterprise clients. This is where volume comes into play, as with a few purchases, results generated by this algorithm would be unpredictable, but reaching a critical amount of data, all statistics tend to correlate with reality more and more (given that the premises are correct). Frequently bought together - Displaying frequently bought together products on cart pages can be very effective. However, in order for virtually any cart page recommendation to provide results, the checkout process must lead customers through the cart page, where the actual recommendations are featured. It is also a relatively data-heavy recommendation technique. The layout of this page is also an important factor. If you have the time and resources, A/B testing different layouts and designs can yield excellent results and insights. (Needless to say, this holds true globally, not just for recommendations.) Netflix, for instance, uses A/B tests extensively for home screen layouts on different platforms, featured shows, and even movie artworks. There\u2019s certainly a lot to learn form their approach. Industry specific e-Commerce Industry where recommendation systems were first widely used. With millions of customers and data on their online behavior, e-commerce companies are best suited to generate accurate recommendations Retail Target scared shoppers back in 2000s when Target systems were able to predict pregnancies even before mothers realized their own pregnancies . Shopping data is the most valuable data as it is the most direct data point on a customer\u2019s intent. Retailers with troves of shopping data are at the forefront of companies making accurate recommendations Media Similar to e-commerce, media businesses are one of the first to jump into recommendations. It is difficult to see a news site without a recommendation system. Banking A mass market product that is consumed digitally by millions. Banking for masses and SMEs are prime for recommendations. Knowing a customer\u2019s detailed financial situation, along with their past preferences, coupled by data of thousands of similar users is quite powerful. Telecom Shares similar dynamics with banking. Telcos have access to millions of customers whose every interaction is recorded. Their product range is also rather limited compared to other industries, making recommendations in telecom an easier problem. Utilities Similar dynamics with telecom but utilities have an even narrower range of products, making recommendations rather simple. Other Personalised merchandising Personalised content Search re-ranking Related product Popular product Similar product Purchase: People who bought X also bought Y Experience: People who read/watched/enjoyed X also enjoyed Y Location: People who have been at/ate at/stayed at X also went to Y Current website: People who come to this website also browse Y Education: People who knew about/worked on/learnt/ X also learnt Y Hiring: People who have skills like your employees Recipes: People who cooked X also cooked Y Context: People in X mood, at Z time do activity Y more Finance: Stocks bought by successful X people Popularity: Items popular in the last hour, week, year Promotions: People who should be offered promotion Y Social: People/friends are talking about item Y Health: People who are healthy do Y more Drugs: People with X characteristics respond to drug Y better Ideas: Past ideas/patents/companies related to your idea Law: Past cases related to your current lawsuit Law Enforcement (slightly scary): People similar to X are likely to commit a crime Y","title":"Use Cases"},{"location":"Use-Cases/#most-common","text":"Popular Products - This is a basic but powerful recommendation logic that works splendidly in nearly all ecommerce stores. The popularity of a product is determined by the number of times it has been purchased (weighted with how long it\u2019s been available). However, more sophisticated recommender systems incorporate other event data into their logics in order to serve even more accurate recommendations (e.g., clicks, views, add-to-cart events, and so on). Getting this right is extremely important, given that the Pareto\u2019s rule in marketing says 80% of product sales come from 20% of products. In the case of content sites (i.e. news sites and video portals), other factors such as time spent on page, percentage scrolled, or seconds watched (of a video) can also be important popularity factors. Personalized recommendations - Personalized recommender widgets display different products to each user based on their past purchase and browsing history. Recommendation algorithms used for this task can differ greatly in terms of how they\u2019re implemented and the factors they consider (and often times, \u201cthe devil is in the details,\u201d as they say). Nevertheless, as popular product recommendations are good for catering for the mainstream, one of the main benefits of personalization in product recommendations is that they can increase the sales of \u201clong tail\u201d items. However, personalized recommendations require considerable amounts of behavioral data on users, which a system does not have in the case of new visitors. This is called the cold start problem for recommender systems. Personalized collaborative filtering recommendations logic is the most common way of personalized recommendations. It\u2019s focusing on the average similarity of products, to the last X number of products a user has viewed. The system uses the same item-to-item collaborative similarity for this task, but it doesn\u2019t compare one item to another, but to all items in the user\u2019s history. Weighing the output based on the recency of interactions usually improves accuracy further. Similar products - Similar product boxes can be based on very different logics. The least complex one is simple category-based filtering, which can be implemented even without a recommendation engine (needless to say, it lags behind in performance as well). If you combine this simple filtering method with meta-data based similarity (descriptions, product titles, tags, prices, etc.), you can greatly enhance the performance, such as by recommending items of the same brand or same color from the current category). For this, you will need to have advanced recommender functionality available on your site. One of the best-performing similarity based logics is a method called \u201citem-to-item collaborative filtering,\u201d a method pioneered by Amazon. I\u2019ll elaborate on this below. \u201cCustomer who bought/viewed this also bought/viewer\u201d collaborative filtering - Collaborative filtering in ecommerce product recommendations was first implemented at scale by Amazon\u2014they filed their initial patent for item-to-item collaborative filtering as early as 1999. I believe their results speak for themselves. At its core, collaborative filtering works by collecting preferences or taste information from many users (collaborating). Collaborative filtering can fuel item-to-item (product similarity based) and personalized recommendations as well. Item-to-item collaborative filtering recommendation logic basically determines the similarity of two products by looking at how often they\u2019re present together in the browsing or purchase histories of users. In practice, widgets using this kind of logics are named \u201cCustomers who viewed this also viewed\u2026\u201d which pretty much explains the basic idea. The preference models these algorithms build are very authentic and specific to your website and your users\u2014they quantify the real interactions between your visitors and platform. Moreover, with ample amount of data, even problems such as automated accessory recommendations can be answered with a reasonable accuracy. (More on this below, in the cart page accessory recommendation section.) Recommending accessories - Recommending accessories for products can significantly increase average order size and value on your site. Moreover, implementing such widgets can be quite easy from a technical point of view. However, depending on the size of your catalog and your category structure, it can be relatively admin-heavy, as it is hard to automate the process of recommending compatible accessories for each item. Therefore, such logics are usually fueled by manually assigned item relations. Ideally, you can recommend categories to categories directly (i.e. iPhone -> iPhone Accessories). This is a lot easier to automate and scale, but requires extremely conscious category structure planning. Of course, with enough data and a bit of creativity, one can abstract rules on how to analyze behavioral information, so that the output of the system will be actual, compatible accessories. One of such easily codifiable rules that can define an accessory in relation to a product is items that are often bought together with it, but cost significantly (two times, three times, or more) less. This is a method we utilize at some of our enterprise clients. This is where volume comes into play, as with a few purchases, results generated by this algorithm would be unpredictable, but reaching a critical amount of data, all statistics tend to correlate with reality more and more (given that the premises are correct). Frequently bought together - Displaying frequently bought together products on cart pages can be very effective. However, in order for virtually any cart page recommendation to provide results, the checkout process must lead customers through the cart page, where the actual recommendations are featured. It is also a relatively data-heavy recommendation technique. The layout of this page is also an important factor. If you have the time and resources, A/B testing different layouts and designs can yield excellent results and insights. (Needless to say, this holds true globally, not just for recommendations.) Netflix, for instance, uses A/B tests extensively for home screen layouts on different platforms, featured shows, and even movie artworks. There\u2019s certainly a lot to learn form their approach.","title":"Most common"},{"location":"Use-Cases/#industry-specific","text":"","title":"Industry specific"},{"location":"Use-Cases/#e-commerce","text":"Industry where recommendation systems were first widely used. With millions of customers and data on their online behavior, e-commerce companies are best suited to generate accurate recommendations","title":"e-Commerce"},{"location":"Use-Cases/#retail","text":"Target scared shoppers back in 2000s when Target systems were able to predict pregnancies even before mothers realized their own pregnancies . Shopping data is the most valuable data as it is the most direct data point on a customer\u2019s intent. Retailers with troves of shopping data are at the forefront of companies making accurate recommendations","title":"Retail"},{"location":"Use-Cases/#media","text":"Similar to e-commerce, media businesses are one of the first to jump into recommendations. It is difficult to see a news site without a recommendation system.","title":"Media"},{"location":"Use-Cases/#banking","text":"A mass market product that is consumed digitally by millions. Banking for masses and SMEs are prime for recommendations. Knowing a customer\u2019s detailed financial situation, along with their past preferences, coupled by data of thousands of similar users is quite powerful.","title":"Banking"},{"location":"Use-Cases/#telecom","text":"Shares similar dynamics with banking. Telcos have access to millions of customers whose every interaction is recorded. Their product range is also rather limited compared to other industries, making recommendations in telecom an easier problem.","title":"Telecom"},{"location":"Use-Cases/#utilities","text":"Similar dynamics with telecom but utilities have an even narrower range of products, making recommendations rather simple.","title":"Utilities"},{"location":"Use-Cases/#other","text":"Personalised merchandising Personalised content Search re-ranking Related product Popular product Similar product Purchase: People who bought X also bought Y Experience: People who read/watched/enjoyed X also enjoyed Y Location: People who have been at/ate at/stayed at X also went to Y Current website: People who come to this website also browse Y Education: People who knew about/worked on/learnt/ X also learnt Y Hiring: People who have skills like your employees Recipes: People who cooked X also cooked Y Context: People in X mood, at Z time do activity Y more Finance: Stocks bought by successful X people Popularity: Items popular in the last hour, week, year Promotions: People who should be offered promotion Y Social: People/friends are talking about item Y Health: People who are healthy do Y more Drugs: People with X characteristics respond to drug Y better Ideas: Past ideas/patents/companies related to your idea Law: Past cases related to your current lawsuit Law Enforcement (slightly scary): People similar to X are likely to commit a crime Y","title":"Other"},{"location":"Vendors/","text":"Personalization Software: Real-Time, AI-Driven Individualization OptinMonster - Most Powerful Lead Generation Software for Marketers Ecommerce Personalization & Conversion Optimization Experience Optimization Platform \u2014 Dynamic Yield Personalization Technology & Personalization Solutions | RichRelevance Yusp Personalization Engine Apptus: Optimize your eCommerce Business with AI solutions Attraqt | Powering Exceptional Shopping Experiences Personalize - Website Personalization Software Home - People Engagement Company | CloudEngage 28 Powerful Ecommerce Personalization Tools to Boost Your Sales CommerceStack \u2013 Related Products Manager for Magento Personalization, Conversion Rate Optimization, Individual Experiences | Cxense Omnichannel Customer Engagement Platform | Emarsys LiveChat | Live Chat Software and Chat Support Software Website Personalization | Product & Content recommendations Better starts here with our all-in-one AI marketing platform | Pure360 PureClarity | Intelligent AI-Driven Ecommerce Personalisation Qubit | Personalization Engine for Ecommerce | Making Ecommerce Better Real-Time Intelligent Personalization Platform | Reflektion eCommerce Search & Product Discovery AI Powered Solutions https://www.linkcious.com Welcome to Certona - The leader in personalization engines VWO | #1 A/B Testing Tool in the World Unless - rapid UX optimization Intelligent Content Marketing - Qwardo Recommender systems for movies, music & media | DataRevenue AI-Powered Real-Time Recommender | Recombee Personalized feeds & Feed relevance Product Recommendations | Magento Website Personalisation Services | Conversion Services | Fresh Egg The website conversion optimization tool for smart marketers - Omniconvert A/B testing platform and AI-driven personalization | Kameleoon Automated Content Personalization Engine | BrightInfo Personalized and Targeted Audience Segmentation | SiteSpect Smart Recommendations | Klevu 30 Website Personalization and Recommendations Software options Personalized Recommendations for Shopify. | LoopClub Personalization from Optimizely SHERPA.AI Frankie AI - Personalizing Ecommerce Zoorix Shopify App - Upsell and Cross Sell for Shopify Store Adobe Target for testing and optimization success Rebuy tasteguru.ai YesPlz - Ecommerce Recommendation Engine for Fashion Retail AI Powered Personalization That Sells - Perzonalization engage - E-commerce Data Platform QuarticOn - personalization power | Improve e-commerce indicators www.sli-systems.com Kea Labs - Recommender System as a Service. API & SDK for Custom-made Recommendation systems Frankie #1 personalization app for Shopify stores - YouTube LimeSpot: eCommerce Personalized Recommendations, Upsell, Cross-sell Sell 29% more in 2019 without spending a dollar on ads Personalization & Recommendations | BigCommerce","title":"Vendors"}]}